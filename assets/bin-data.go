// Code generated by go-bindata.
// sources:
// ../src/.DS_Store
// ../src/app/app.js
// ../src/app/shared/api/getActivePage.js
// ../src/app/shared/api/getBrowseTree.js
// ../src/app/shared/api/saveNewPage.js
// ../src/app/shared/api/updatePage.js
// ../src/app/shared/models/pageModels.js
// ../src/app/shared/state/baseUrlState.js
// ../src/app/shared/state/collectionState.js
// ../src/app/shared/state/state.js
// ../src/app/shared/state/userState.js
// ../src/app/shared/state/watchState.js
// ../src/app/shared/state/workspaceState.js
// ../src/app/shared/templateHelpers/ifCond.js
// ../src/app/shared/templatePartials/loadingAnimation.handlebars
// ../src/app/shared/utilities/bindDatePicker.js
// ../src/app/shared/utilities/get.js
// ../src/app/shared/utilities/post.js
// ../src/app/shared/utilities/utilities.js
// ../src/app/shared/utilities/utilities.test.js
// ../src/app/workspace/browse/browse.handlebars
// ../src/app/workspace/browse/browseController.js
// ../src/app/workspace/browse/browseNode.handlebars
// ../src/app/workspace/browse/browseView.js
// ../src/app/workspace/browse/browseVisNode.handlebars
// ../src/app/workspace/create/create.handlebars
// ../src/app/workspace/create/createController.js
// ../src/app/workspace/create/createView.js
// ../src/app/workspace/edit/edit.handlebars
// ../src/app/workspace/edit/editAccordion.handlebars
// ../src/app/workspace/edit/editController.js
// ../src/app/workspace/edit/editView.js
// ../src/app/workspace/navigation/navigation.handlebars
// ../src/app/workspace/navigation/navigationController.js
// ../src/app/workspace/navigation/navigationView.js
// ../src/app/workspace/preview/preview.handlebars
// ../src/app/workspace/preview/previewController.js
// ../src/app/workspace/preview/previewView.js
// ../src/app/workspace/workspace.handlebars
// ../src/app/workspace/workspaceController.js
// ../src/app/workspace/workspaceView.js
// ../src/assets/css/main.min.css
// ../src/assets/css/main.min.css.map
// ../src/assets/js/bundle.js
// ../src/assets/js/main.js
// ../src/assets/js/templates.js
// ../src/assets/version.json
// ../src/css/florence.css
// ../src/css/rapid-prototype-main.css
// ../src/css/third-party/c3.css
// ../src/css/third-party/jquery-ui.theme.min.css
// ../src/css/third-party/jquery.tagit.css
// ../src/css/third-party/pagedown.css
// ../src/css/third-party/responsive-tables.css
// ../src/css/third-party/sweetalert.css
// ../src/css/third-party/tagit.ui-zendesk.css
// ../src/font/Open_Sans/LICENSE.txt
// ../src/font/Open_Sans/OpenSans-Bold.eot
// ../src/font/Open_Sans/OpenSans-Bold.svg
// ../src/font/Open_Sans/OpenSans-Bold.ttf
// ../src/font/Open_Sans/OpenSans-Bold.woff
// ../src/font/Open_Sans/OpenSans-Bold.woff2
// ../src/font/Open_Sans/OpenSans-BoldItalic.eot
// ../src/font/Open_Sans/OpenSans-BoldItalic.svg
// ../src/font/Open_Sans/OpenSans-BoldItalic.ttf
// ../src/font/Open_Sans/OpenSans-BoldItalic.woff
// ../src/font/Open_Sans/OpenSans-ExtraBold.eot
// ../src/font/Open_Sans/OpenSans-ExtraBold.svg
// ../src/font/Open_Sans/OpenSans-ExtraBold.ttf
// ../src/font/Open_Sans/OpenSans-ExtraBold.woff
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf
// ../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff
// ../src/font/Open_Sans/OpenSans-Italic.eot
// ../src/font/Open_Sans/OpenSans-Italic.svg
// ../src/font/Open_Sans/OpenSans-Italic.ttf
// ../src/font/Open_Sans/OpenSans-Italic.woff
// ../src/font/Open_Sans/OpenSans-Light.eot
// ../src/font/Open_Sans/OpenSans-Light.svg
// ../src/font/Open_Sans/OpenSans-Light.ttf
// ../src/font/Open_Sans/OpenSans-Light.woff
// ../src/font/Open_Sans/OpenSans-Light.woff2
// ../src/font/Open_Sans/OpenSans-LightItalic.eot
// ../src/font/Open_Sans/OpenSans-LightItalic.svg
// ../src/font/Open_Sans/OpenSans-LightItalic.ttf
// ../src/font/Open_Sans/OpenSans-LightItalic.woff
// ../src/font/Open_Sans/OpenSans-Regular.eot
// ../src/font/Open_Sans/OpenSans-Regular.svg
// ../src/font/Open_Sans/OpenSans-Regular.ttf
// ../src/font/Open_Sans/OpenSans-Regular.woff
// ../src/font/Open_Sans/OpenSans-Regular.woff2
// ../src/font/Open_Sans/OpenSans-Semibold.eot
// ../src/font/Open_Sans/OpenSans-Semibold.svg
// ../src/font/Open_Sans/OpenSans-Semibold.ttf
// ../src/font/Open_Sans/OpenSans-Semibold.woff
// ../src/font/Open_Sans/OpenSans-Semibold.woff2
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.eot
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.svg
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf
// ../src/font/Open_Sans/OpenSans-SemiboldItalic.woff
// ../src/font/Roboto_Slab/LICENSE.txt
// ../src/font/Roboto_Slab/RobotoSlab-Bold.eot
// ../src/font/Roboto_Slab/RobotoSlab-Bold.svg
// ../src/font/Roboto_Slab/RobotoSlab-Bold.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Bold.woff
// ../src/font/Roboto_Slab/RobotoSlab-Bold.woff2
// ../src/font/Roboto_Slab/RobotoSlab-Light.eot
// ../src/font/Roboto_Slab/RobotoSlab-Light.svg
// ../src/font/Roboto_Slab/RobotoSlab-Light.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Light.woff
// ../src/font/Roboto_Slab/RobotoSlab-Regular.eot
// ../src/font/Roboto_Slab/RobotoSlab-Regular.svg
// ../src/font/Roboto_Slab/RobotoSlab-Regular.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Regular.woff
// ../src/font/Roboto_Slab/RobotoSlab-Regular.woff2
// ../src/font/Roboto_Slab/RobotoSlab-Thin.eot
// ../src/font/Roboto_Slab/RobotoSlab-Thin.svg
// ../src/font/Roboto_Slab/RobotoSlab-Thin.ttf
// ../src/font/Roboto_Slab/RobotoSlab-Thin.woff
// ../src/font/Roboto_Slab/RobotoSlab-Thin.woff2
// ../src/font/Ubuntu_Mono/UFL.txt
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff
// ../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2
// ../src/font/florence.eot
// ../src/font/florence.svg
// ../src/font/florence.ttf
// ../src/font/florence.woff
// ../src/html templates/jquery-ui.min.js
// ../src/html templates/pagedown.css
// ../src/html templates/publish-manual.html
// ../src/html templates/publish-scheduled.html
// ../src/html templates/ui-functions.js
// ../src/html templates/workspace-browse.html
// ../src/html templates/workspace-create.html
// ../src/html templates/workspace-edit.html
// ../src/img/favicon11.ico
// ../src/img/favicon12.ico
// ../src/img/favicon21.ico
// ../src/img/favicon22.ico
// ../src/img/favicon23.ico
// ../src/img/favicon24.ico
// ../src/img/flo-logo.png
// ../src/img/flo-logo144.png
// ../src/img/rule-21.png
// ../src/img/rule-22.png
// ../src/img/rule.png
// ../src/img/sb_v_double_arrow.png
// ../src/img/semi-transparent-bg.png
// ../src/img/sprite.png
// ../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png
// ../src/img/ui-bg_diagonals-thick_20_666666_40x40.png
// ../src/img/ui-bg_flat_10_000000_40x100.png
// ../src/img/ui-bg_glass_100_f6f6f6_1x400.png
// ../src/img/ui-bg_glass_100_fdf5ce_1x400.png
// ../src/img/ui-bg_glass_65_ffffff_1x400.png
// ../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png
// ../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png
// ../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png
// ../src/img/ui-icons_222222_256x240.png
// ../src/img/ui-icons_228ef1_256x240.png
// ../src/img/ui-icons_ef8c08_256x240.png
// ../src/img/ui-icons_ffd27a_256x240.png
// ../src/img/ui-icons_ffffff_256x240.png
// ../src/img/wmd-buttons.png
// ../src/index.html
// ../src/js/app.js
// ../src/js/classes/cookieUtils.js
// ../src/js/classes/florence.js
// ../src/js/classes/pathUtils.js
// ../src/js/classes/stringUtils.js
// ../src/js/components/_accordion.js
// ../src/js/components/_fileInput.js
// ../src/js/components/_hidePanel.js
// ../src/js/components/_showPanel.js
// ../src/js/functions/_ContentDeleteMarker.js
// ../src/js/functions/__init.js
// ../src/js/functions/_accordionSettings.js
// ../src/js/functions/_autoSize.js
// ../src/js/functions/_checkForPageChanged.js
// ../src/js/functions/_checkPathParsed.js
// ../src/js/functions/_checkPathSlashes.js
// ../src/js/functions/_checkRenameUri.js
// ../src/js/functions/_collectionHelpers.js
// ../src/js/functions/_copyPath.js
// ../src/js/functions/_createCollection.js
// ../src/js/functions/_createWorkspace.js
// ../src/js/functions/_deleteTeam.js
// ../src/js/functions/_deleteUnpublishedVersion.js
// ../src/js/functions/_deleteUser.js
// ../src/js/functions/_editAddDataset.js
// ../src/js/functions/_editAddFile.js
// ../src/js/functions/_editAddFileWithDetails.js
// ../src/js/functions/_editAlert.js
// ../src/js/functions/_editBlocks.js
// ../src/js/functions/_editCollection.js
// ../src/js/functions/_editDatasetVersion.js
// ../src/js/functions/_editDate.js
// ../src/js/functions/_editDocWithFilesCorrection.js
// ../src/js/functions/_editDocumentCorrection.js
// ../src/js/functions/_editIntLinks.js
// ../src/js/functions/_editMarkdownOneObject.js
// ../src/js/functions/_editMarkdownWithNoTitle.js
// ../src/js/functions/_editServiceMessage.js
// ../src/js/functions/_editTopics.js
// ../src/js/functions/_environment.js
// ../src/js/functions/_externalLinkAccordionSection.js
// ../src/js/functions/_fileDelete.js
// ../src/js/functions/_fileUpload.js
// ../src/js/functions/_getLastPosition.js
// ../src/js/functions/_getNetworkStatus.js
// ../src/js/functions/_getParentPage.js
// ../src/js/functions/_getPathNameTrimLast.js
// ../src/js/functions/_getPreviewUrl.js
// ../src/js/functions/_handleApiError.js
// ../src/js/functions/_initialiseNoteMarkdown.js
// ../src/js/functions/_inputValidation.js
// ../src/js/functions/_loadBrowseScreen.js
// ../src/js/functions/_loadChartBuilder.js
// ../src/js/functions/_loadChartsList.js
// ../src/js/functions/_loadCreateScreen.js
// ../src/js/functions/_loadCreator.js
// ../src/js/functions/_loadCreatorDatepicker.js
// ../src/js/functions/_loadEmbedIframe.js
// ../src/js/functions/_loadEquationBuilder.js
// ../src/js/functions/_loadEquationsList.js
// ../src/js/functions/_loadImageBuilder.js
// ../src/js/functions/_loadImagesList.js
// ../src/js/functions/_loadImportScreen.js
// ../src/js/functions/_loadMarkdownEditor.js
// ../src/js/functions/_loadPageDataIntoEditor.js
// ../src/js/functions/_loadParentLink.js
// ../src/js/functions/_loadT16Creator.js
// ../src/js/functions/_loadT4Creator.js
// ../src/js/functions/_loadT6Creator.js
// ../src/js/functions/_loadT7Creator.js
// ../src/js/functions/_loadT8DatasetCreator.js
// ../src/js/functions/_loadT8LandingCreator.js
// ../src/js/functions/_loadTableBuilder.js
// ../src/js/functions/_loadTablesList.js
// ../src/js/functions/_loadVisCreator.js
// ../src/js/functions/_logout.js
// ../src/js/functions/_makeUrl.js
// ../src/js/functions/_markdownContentAccordionSection.js
// ../src/js/functions/_markdownSetLines.js
// ../src/js/functions/_menuSelectSettings.js
// ../src/js/functions/_moveBrowseNode.js
// ../src/js/functions/_parseUrl.js
// ../src/js/functions/_postApproveCollection.js
// ../src/js/functions/_postComplete.js
// ../src/js/functions/_postContent.js
// ../src/js/functions/_postLogin.js
// ../src/js/functions/_postReview.js
// ../src/js/functions/_postTeam.js
// ../src/js/functions/_postUser.js
// ../src/js/functions/_publish.js
// ../src/js/functions/_refreshPreview.js
// ../src/js/functions/_relatedItemAccordionSection.js
// ../src/js/functions/_renameChildren.js
// ../src/js/functions/_renameContent.js
// ../src/js/functions/_renderAccordionSections.js
// ../src/js/functions/_reset.js
// ../src/js/functions/_saveContent.js
// ../src/js/functions/_saveNewCorrection.js
// ../src/js/functions/_setShortcuts.js
// ../src/js/functions/_setupFlorence.js
// ../src/js/functions/_t16ReleaseEditor.js
// ../src/js/functions/_t1Editor.js
// ../src/js/functions/_t1EditorCensus.js
// ../src/js/functions/_t2Editor.js
// ../src/js/functions/_t3Editor.js
// ../src/js/functions/_t4ArticleDownloadEditor.js
// ../src/js/functions/_t4ArticleEditor.js
// ../src/js/functions/_t4BulletinEditor.js
// ../src/js/functions/_t5TimeseriesEditor.js
// ../src/js/functions/_t6CompendiumChapterEditor.js
// ../src/js/functions/_t6CompendiumDataEditor.js
// ../src/js/functions/_t6CompendiumEditor.js
// ../src/js/functions/_t7AdHocEditor.js
// ../src/js/functions/_t7FoiEditor.js
// ../src/js/functions/_t7MethodologyDownloadEditor.js
// ../src/js/functions/_t7MethodologyEditor.js
// ../src/js/functions/_t7QmiEditor.js
// ../src/js/functions/_t7StaticArticleEditor.js
// ../src/js/functions/_t7StaticLandingPageEditor.js
// ../src/js/functions/_t7StaticPageEditor.js
// ../src/js/functions/_t8DatasetEditor.js
// ../src/js/functions/_t8LandingPageEditor.js
// ../src/js/functions/_transfer.js
// ../src/js/functions/_treeNodeSelect.js
// ../src/js/functions/_ui.js
// ../src/js/functions/_uiTidyup.js
// ../src/js/functions/_updateContent.js
// ../src/js/functions/_viewChangePassword.js
// ../src/js/functions/_viewCollectionDetails.js
// ../src/js/functions/_viewCollections.js
// ../src/js/functions/_viewController.js
// ../src/js/functions/_viewLogIn.js
// ../src/js/functions/_viewPublish.js
// ../src/js/functions/_viewPublishDetails.js
// ../src/js/functions/_viewReleaseSelector.js
// ../src/js/functions/_viewReportDetails.js
// ../src/js/functions/_viewReports.js
// ../src/js/functions/_viewTeamDetails.js
// ../src/js/functions/_viewTeams.js
// ../src/js/functions/_viewUserDetails.js
// ../src/js/functions/_viewUsers.js
// ../src/js/functions/_viewWorkspace.js
// ../src/js/functions/_visualisationEditor.js
// ../src/js/functions/registerServiceWorker.js
// ../src/js/third-party/highcharts.js
// ../src/js/third-party/redux.min.js
// ../src/js/zebedee-api/_deleteCollection.js
// ../src/js/zebedee-api/_deleteContent.js
// ../src/js/zebedee-api/_deleteEquation.js
// ../src/js/zebedee-api/_getCollection.js
// ../src/js/zebedee-api/_getPageData.js
// ../src/js/zebedee-api/_getPageResource.js
// ../src/js/zebedee-api/_getTeams.js
// ../src/js/zebedee-api/_getUserPermission.js
// ../src/js/zebedee-api/_getUsers.js
// ../src/js/zebedee-api/_moveContent.js
// ../src/js/zebedee-api/_postPassword.js
// ../src/js/zebedee-api/_postPermission.js
// ../src/js/zebedee-api/_putContent.js
// ../src/manifest.json
// ../src/package.json
// ../src/scss/components/_accordion.scss
// ../src/scss/components/_builder.scss
// ../src/scss/components/_editor-section.scss
// ../src/scss/components/_icons.scss
// ../src/scss/components/_markdown-editor.scss
// ../src/scss/components/_network-status.scss
// ../src/scss/components/_page.scss
// ../src/scss/components/_slider.scss
// ../src/scss/elements/_buttons.scss
// ../src/scss/elements/_forms.scss
// ../src/scss/elements/_inputs.scss
// ../src/scss/elements/_lists.scss
// ../src/scss/elements/_nav.scss
// ../src/scss/elements/_tables.scss
// ../src/scss/elements/_typography.scss
// ../src/scss/main.scss
// ../src/scss/partials/_base.scss
// ../src/scss/partials/_collections.scss
// ../src/scss/partials/_colour-palette.scss
// ../src/scss/partials/_elements.scss
// ../src/scss/partials/_fonts.scss
// ../src/scss/partials/_jqui.scss
// ../src/scss/partials/_publish.scss
// ../src/scss/partials/_reset.scss
// ../src/scss/partials/_shame.scss
// ../src/scss/partials/_utilities.scss
// ../src/scss/partials/_workspace.scss
// ../src/scss/utilities/_display.scss
// ../src/scss/utilities/_grid.scss
// ../src/scss/utilities/_margin.scss
// ../src/scss/utilities/_mixins.scss
// ../src/scss/utilities/_padding.scss
// ../src/scss/utilities/_panels.scss
// ../src/scss/utilities/_utilities.scss
// ../src/service-worker.js
// ../src/spec/classes/FlorenceSpec.js
// ../src/spec/classes/PathUtilsSpec.js
// ../src/spec/classes/StringUtilsSpec.js
// ../src/spec/support/jasmine.json
// ../src/templates/blockModal.handlebars
// ../src/templates/blockNewsModal.handlebars
// ../src/templates/browseNode.handlebars
// ../src/templates/browseNodeDataVis.handlebars
// ../src/templates/changePassword.handlebars
// ../src/templates/chartBuilder.handlebars
// ../src/templates/chartEditBarChartExtras.handlebars
// ../src/templates/chartEditBarlineExtras.handlebars
// ../src/templates/chartEditDualAxisExtras.handlebars
// ../src/templates/chartEditLineChartExtras.handlebars
// ../src/templates/childDeletes.handlebars
// ../src/templates/collectionDetails.handlebars
// ../src/templates/collectionEdit.handlebars
// ../src/templates/collectionList.handlebars
// ../src/templates/editNav.handlebars
// ../src/templates/editNavChild.handlebars
// ../src/templates/editorAlert.handlebars
// ../src/templates/editorCompendiumDatasetFiles.handlebars
// ../src/templates/editorContent.handlebars
// ../src/templates/editorContentNoTitle.handlebars
// ../src/templates/editorContentOne.handlebars
// ../src/templates/editorCorrection.handlebars
// ../src/templates/editorDate.handlebars
// ../src/templates/editorDocWithFiles.handlebars
// ../src/templates/editorDownloads.handlebars
// ../src/templates/editorDownloadsWithSummary.handlebars
// ../src/templates/editorLinks.handlebars
// ../src/templates/editorRelated.handlebars
// ../src/templates/editorServiceMessage.handlebars
// ../src/templates/editorT1Blocks.handlebars
// ../src/templates/editorTopics.handlebars
// ../src/templates/embedIframe.handlebars
// ../src/templates/equationBuilder.handlebars
// ../src/templates/florence.handlebars
// ../src/templates/iframeNav.handlebars
// ../src/templates/imageBuilder.handlebars
// ../src/templates/linkExternalModal.handlebars
// ../src/templates/linkModal.handlebars
// ../src/templates/loadingAnimation.handlebars
// ../src/templates/login.handlebars
// ../src/templates/mainNav.handlebars
// ../src/templates/markdownEditor.handlebars
// ../src/templates/markdownEditorNoTitle.handlebars
// ../src/templates/publishDetails.handlebars
// ../src/templates/publishList.handlebars
// ../src/templates/relatedModal.handlebars
// ../src/templates/releaseSelector.handlebars
// ../src/templates/reportList.handlebars
// ../src/templates/reportPublishedDetails.handlebars
// ../src/templates/reportUnpublishedDetails.handlebars
// ../src/templates/selectorHour.handlebars
// ../src/templates/selectorMinute.handlebars
// ../src/templates/tableBuilder.handlebars
// ../src/templates/teamDetails.handlebars
// ../src/templates/teamEdit.handlebars
// ../src/templates/teamList.handlebars
// ../src/templates/tickAnimation.handlebars
// ../src/templates/uploadFileForm.handlebars
// ../src/templates/userDetails.handlebars
// ../src/templates/userList.handlebars
// ../src/templates/workBrowse.handlebars
// ../src/templates/workCreate.handlebars
// ../src/templates/workEditCharts.handlebars
// ../src/templates/workEditEquations.handlebars
// ../src/templates/workEditImages.handlebars
// ../src/templates/workEditT1.handlebars
// ../src/templates/workEditT16.handlebars
// ../src/templates/workEditT1Census.handlebars
// ../src/templates/workEditT1Sections.handlebars
// ../src/templates/workEditT2.handlebars
// ../src/templates/workEditT3.handlebars
// ../src/templates/workEditT4Article.handlebars
// ../src/templates/workEditT4ArticleDownload.handlebars
// ../src/templates/workEditT4Bulletin.handlebars
// ../src/templates/workEditT4Compendium.handlebars
// ../src/templates/workEditT4Methodology.handlebars
// ../src/templates/workEditT5.handlebars
// ../src/templates/workEditT6.handlebars
// ../src/templates/workEditT6Chapter.handlebars
// ../src/templates/workEditT6Dataset.handlebars
// ../src/templates/workEditT7.handlebars
// ../src/templates/workEditT7Landing.handlebars
// ../src/templates/workEditT7StaticArticle.handlebars
// ../src/templates/workEditT8.handlebars
// ../src/templates/workEditT8Compendium.handlebars
// ../src/templates/workEditT8CorrectionList.handlebars
// ../src/templates/workEditT8LandingDatasetList.handlebars
// ../src/templates/workEditT8LandingPage.handlebars
// ../src/templates/workEditT8VersionList.handlebars
// ../src/templates/workEditTables.handlebars
// ../src/templates/workEditVisualisation.handlebars
// ../src/templates/workImport.handlebars
// ../src/templates/workSpace.handlebars
// ../src/webpack.config-test.js
// ../src/webpack.config.js
// ../src/webpack.html
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// SrcDs_store reads file data from disk. It returns an error on failure.
func SrcDs_store() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/.DS_Store"
	name := "../src/.DS_Store"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppAppJs reads file data from disk. It returns an error on failure.
func SrcAppAppJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/app.js"
	name := "../src/app/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedApiGetactivepageJs reads file data from disk. It returns an error on failure.
func SrcAppSharedApiGetactivepageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/api/getActivePage.js"
	name := "../src/app/shared/api/getActivePage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedApiGetbrowsetreeJs reads file data from disk. It returns an error on failure.
func SrcAppSharedApiGetbrowsetreeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/api/getBrowseTree.js"
	name := "../src/app/shared/api/getBrowseTree.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedApiSavenewpageJs reads file data from disk. It returns an error on failure.
func SrcAppSharedApiSavenewpageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/api/saveNewPage.js"
	name := "../src/app/shared/api/saveNewPage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedApiUpdatepageJs reads file data from disk. It returns an error on failure.
func SrcAppSharedApiUpdatepageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/api/updatePage.js"
	name := "../src/app/shared/api/updatePage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedModelsPagemodelsJs reads file data from disk. It returns an error on failure.
func SrcAppSharedModelsPagemodelsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/models/pageModels.js"
	name := "../src/app/shared/models/pageModels.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateBaseurlstateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateBaseurlstateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/baseUrlState.js"
	name := "../src/app/shared/state/baseUrlState.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateCollectionstateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateCollectionstateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/collectionState.js"
	name := "../src/app/shared/state/collectionState.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateStateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateStateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/state.js"
	name := "../src/app/shared/state/state.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateUserstateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateUserstateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/userState.js"
	name := "../src/app/shared/state/userState.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateWatchstateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateWatchstateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/watchState.js"
	name := "../src/app/shared/state/watchState.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedStateWorkspacestateJs reads file data from disk. It returns an error on failure.
func SrcAppSharedStateWorkspacestateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/state/workspaceState.js"
	name := "../src/app/shared/state/workspaceState.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedTemplatehelpersIfcondJs reads file data from disk. It returns an error on failure.
func SrcAppSharedTemplatehelpersIfcondJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/templateHelpers/ifCond.js"
	name := "../src/app/shared/templateHelpers/ifCond.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedTemplatepartialsLoadinganimationHandlebars reads file data from disk. It returns an error on failure.
func SrcAppSharedTemplatepartialsLoadinganimationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/templatePartials/loadingAnimation.handlebars"
	name := "../src/app/shared/templatePartials/loadingAnimation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedUtilitiesBinddatepickerJs reads file data from disk. It returns an error on failure.
func SrcAppSharedUtilitiesBinddatepickerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/utilities/bindDatePicker.js"
	name := "../src/app/shared/utilities/bindDatePicker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedUtilitiesGetJs reads file data from disk. It returns an error on failure.
func SrcAppSharedUtilitiesGetJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/utilities/get.js"
	name := "../src/app/shared/utilities/get.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedUtilitiesPostJs reads file data from disk. It returns an error on failure.
func SrcAppSharedUtilitiesPostJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/utilities/post.js"
	name := "../src/app/shared/utilities/post.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedUtilitiesUtilitiesJs reads file data from disk. It returns an error on failure.
func SrcAppSharedUtilitiesUtilitiesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/utilities/utilities.js"
	name := "../src/app/shared/utilities/utilities.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppSharedUtilitiesUtilitiesTestJs reads file data from disk. It returns an error on failure.
func SrcAppSharedUtilitiesUtilitiesTestJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/shared/utilities/utilities.test.js"
	name := "../src/app/shared/utilities/utilities.test.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceBrowseBrowseHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceBrowseBrowseHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/browse/browse.handlebars"
	name := "../src/app/workspace/browse/browse.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceBrowseBrowsecontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceBrowseBrowsecontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/browse/browseController.js"
	name := "../src/app/workspace/browse/browseController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceBrowseBrowsenodeHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceBrowseBrowsenodeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/browse/browseNode.handlebars"
	name := "../src/app/workspace/browse/browseNode.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceBrowseBrowseviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceBrowseBrowseviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/browse/browseView.js"
	name := "../src/app/workspace/browse/browseView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceBrowseBrowsevisnodeHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceBrowseBrowsevisnodeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/browse/browseVisNode.handlebars"
	name := "../src/app/workspace/browse/browseVisNode.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceCreateCreateHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceCreateCreateHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/create/create.handlebars"
	name := "../src/app/workspace/create/create.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceCreateCreatecontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceCreateCreatecontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/create/createController.js"
	name := "../src/app/workspace/create/createController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceCreateCreateviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceCreateCreateviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/create/createView.js"
	name := "../src/app/workspace/create/createView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceEditEditHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceEditEditHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/edit/edit.handlebars"
	name := "../src/app/workspace/edit/edit.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceEditEditaccordionHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceEditEditaccordionHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/edit/editAccordion.handlebars"
	name := "../src/app/workspace/edit/editAccordion.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceEditEditcontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceEditEditcontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/edit/editController.js"
	name := "../src/app/workspace/edit/editController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceEditEditviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceEditEditviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/edit/editView.js"
	name := "../src/app/workspace/edit/editView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceNavigationNavigationHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceNavigationNavigationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/navigation/navigation.handlebars"
	name := "../src/app/workspace/navigation/navigation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceNavigationNavigationcontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceNavigationNavigationcontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/navigation/navigationController.js"
	name := "../src/app/workspace/navigation/navigationController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceNavigationNavigationviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceNavigationNavigationviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/navigation/navigationView.js"
	name := "../src/app/workspace/navigation/navigationView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspacePreviewPreviewHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspacePreviewPreviewHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/preview/preview.handlebars"
	name := "../src/app/workspace/preview/preview.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspacePreviewPreviewcontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspacePreviewPreviewcontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/preview/previewController.js"
	name := "../src/app/workspace/preview/previewController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspacePreviewPreviewviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspacePreviewPreviewviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/preview/previewView.js"
	name := "../src/app/workspace/preview/previewView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceWorkspaceHandlebars reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceWorkspaceHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/workspace.handlebars"
	name := "../src/app/workspace/workspace.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceWorkspacecontrollerJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceWorkspacecontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/workspaceController.js"
	name := "../src/app/workspace/workspaceController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAppWorkspaceWorkspaceviewJs reads file data from disk. It returns an error on failure.
func SrcAppWorkspaceWorkspaceviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/app/workspace/workspaceView.js"
	name := "../src/app/workspace/workspaceView.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsCssMainMinCss reads file data from disk. It returns an error on failure.
func SrcAssetsCssMainMinCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/css/main.min.css"
	name := "../src/assets/css/main.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsCssMainMinCssMap reads file data from disk. It returns an error on failure.
func SrcAssetsCssMainMinCssMap() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/css/main.min.css.map"
	name := "../src/assets/css/main.min.css.map"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsBundleJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsBundleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/bundle.js"
	name := "../src/assets/js/bundle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsMainJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsMainJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/main.js"
	name := "../src/assets/js/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsJsTemplatesJs reads file data from disk. It returns an error on failure.
func SrcAssetsJsTemplatesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/js/templates.js"
	name := "../src/assets/js/templates.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcAssetsVersionJson reads file data from disk. It returns an error on failure.
func SrcAssetsVersionJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/assets/version.json"
	name := "../src/assets/version.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssFlorenceCss reads file data from disk. It returns an error on failure.
func SrcCssFlorenceCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/florence.css"
	name := "../src/css/florence.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssRapidPrototypeMainCss reads file data from disk. It returns an error on failure.
func SrcCssRapidPrototypeMainCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/rapid-prototype-main.css"
	name := "../src/css/rapid-prototype-main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyC3Css reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyC3Css() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/c3.css"
	name := "../src/css/third-party/c3.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyJqueryUiThemeMinCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyJqueryUiThemeMinCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/jquery-ui.theme.min.css"
	name := "../src/css/third-party/jquery-ui.theme.min.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyJqueryTagitCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyJqueryTagitCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/jquery.tagit.css"
	name := "../src/css/third-party/jquery.tagit.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyPagedownCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyPagedownCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/pagedown.css"
	name := "../src/css/third-party/pagedown.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyResponsiveTablesCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyResponsiveTablesCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/responsive-tables.css"
	name := "../src/css/third-party/responsive-tables.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartySweetalertCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartySweetalertCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/sweetalert.css"
	name := "../src/css/third-party/sweetalert.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcCssThirdPartyTagitUiZendeskCss reads file data from disk. It returns an error on failure.
func SrcCssThirdPartyTagitUiZendeskCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/css/third-party/tagit.ui-zendesk.css"
	name := "../src/css/third-party/tagit.ui-zendesk.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansLicenseTxt reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansLicenseTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/LICENSE.txt"
	name := "../src/font/Open_Sans/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.eot"
	name := "../src/font/Open_Sans/OpenSans-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.svg"
	name := "../src/font/Open_Sans/OpenSans-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.ttf"
	name := "../src/font/Open_Sans/OpenSans-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.woff"
	name := "../src/font/Open_Sans/OpenSans-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Bold.woff2"
	name := "../src/font/Open_Sans/OpenSans-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansBolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansBolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-BoldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.eot"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.svg"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.ttf"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtraboldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtraboldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBold.woff"
	name := "../src/font/Open_Sans/OpenSans-ExtraBold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansExtrabolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansExtrabolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.eot"
	name := "../src/font/Open_Sans/OpenSans-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.svg"
	name := "../src/font/Open_Sans/OpenSans-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.ttf"
	name := "../src/font/Open_Sans/OpenSans-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansItalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansItalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Italic.woff"
	name := "../src/font/Open_Sans/OpenSans-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.eot"
	name := "../src/font/Open_Sans/OpenSans-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.svg"
	name := "../src/font/Open_Sans/OpenSans-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.ttf"
	name := "../src/font/Open_Sans/OpenSans-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.woff"
	name := "../src/font/Open_Sans/OpenSans-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Light.woff2"
	name := "../src/font/Open_Sans/OpenSans-Light.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansLightitalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansLightitalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-LightItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-LightItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.eot"
	name := "../src/font/Open_Sans/OpenSans-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.svg"
	name := "../src/font/Open_Sans/OpenSans-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.ttf"
	name := "../src/font/Open_Sans/OpenSans-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.woff"
	name := "../src/font/Open_Sans/OpenSans-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Regular.woff2"
	name := "../src/font/Open_Sans/OpenSans-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.eot"
	name := "../src/font/Open_Sans/OpenSans-Semibold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.svg"
	name := "../src/font/Open_Sans/OpenSans-Semibold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.ttf"
	name := "../src/font/Open_Sans/OpenSans-Semibold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.woff"
	name := "../src/font/Open_Sans/OpenSans-Semibold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemiboldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemiboldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-Semibold.woff2"
	name := "../src/font/Open_Sans/OpenSans-Semibold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontOpen_sansOpensansSemibolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontOpen_sansOpensansSemibolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	name := "../src/font/Open_Sans/OpenSans-SemiboldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabLicenseTxt reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabLicenseTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/LICENSE.txt"
	name := "../src/font/Roboto_Slab/LICENSE.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Bold.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabLightWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabLightWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Light.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Light.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Regular.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinEot reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.eot"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinSvg reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.svg"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinTtf reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinWoff reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.woff"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontRoboto_slabRobotoslabThinWoff2 reads file data from disk. It returns an error on failure.
func SrcFontRoboto_slabRobotoslabThinWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Roboto_Slab/RobotoSlab-Thin.woff2"
	name := "../src/font/Roboto_Slab/RobotoSlab-Thin.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUflTxt reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUflTxt() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UFL.txt"
	name := "../src/font/Ubuntu_Mono/UFL.txt"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBoldWoff2 reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBoldWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoBolditalicWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoBolditalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoItalicWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoItalicWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularEot reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularSvg reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularTtf reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularWoff reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontUbuntu_monoUbuntumonoRegularWoff2 reads file data from disk. It returns an error on failure.
func SrcFontUbuntu_monoUbuntumonoRegularWoff2() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2"
	name := "../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceEot reads file data from disk. It returns an error on failure.
func SrcFontFlorenceEot() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.eot"
	name := "../src/font/florence.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceSvg reads file data from disk. It returns an error on failure.
func SrcFontFlorenceSvg() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.svg"
	name := "../src/font/florence.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceTtf reads file data from disk. It returns an error on failure.
func SrcFontFlorenceTtf() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.ttf"
	name := "../src/font/florence.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcFontFlorenceWoff reads file data from disk. It returns an error on failure.
func SrcFontFlorenceWoff() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/font/florence.woff"
	name := "../src/font/florence.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesJqueryUiMinJs reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesJqueryUiMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/jquery-ui.min.js"
	name := "../src/html templates/jquery-ui.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPagedownCss reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPagedownCss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/pagedown.css"
	name := "../src/html templates/pagedown.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPublishManualHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPublishManualHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/publish-manual.html"
	name := "../src/html templates/publish-manual.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesPublishScheduledHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesPublishScheduledHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/publish-scheduled.html"
	name := "../src/html templates/publish-scheduled.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesUiFunctionsJs reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesUiFunctionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/ui-functions.js"
	name := "../src/html templates/ui-functions.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceBrowseHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceBrowseHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-browse.html"
	name := "../src/html templates/workspace-browse.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceCreateHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceCreateHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-create.html"
	name := "../src/html templates/workspace-create.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcHtmlTemplatesWorkspaceEditHtml reads file data from disk. It returns an error on failure.
func SrcHtmlTemplatesWorkspaceEditHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/html templates/workspace-edit.html"
	name := "../src/html templates/workspace-edit.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon11Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon11Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon11.ico"
	name := "../src/img/favicon11.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon12Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon12Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon12.ico"
	name := "../src/img/favicon12.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon21Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon21Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon21.ico"
	name := "../src/img/favicon21.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon22Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon22Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon22.ico"
	name := "../src/img/favicon22.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon23Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon23Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon23.ico"
	name := "../src/img/favicon23.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFavicon24Ico reads file data from disk. It returns an error on failure.
func SrcImgFavicon24Ico() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/favicon24.ico"
	name := "../src/img/favicon24.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFloLogoPng reads file data from disk. It returns an error on failure.
func SrcImgFloLogoPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/flo-logo.png"
	name := "../src/img/flo-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgFloLogo144Png reads file data from disk. It returns an error on failure.
func SrcImgFloLogo144Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/flo-logo144.png"
	name := "../src/img/flo-logo144.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRule21Png reads file data from disk. It returns an error on failure.
func SrcImgRule21Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule-21.png"
	name := "../src/img/rule-21.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRule22Png reads file data from disk. It returns an error on failure.
func SrcImgRule22Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule-22.png"
	name := "../src/img/rule-22.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgRulePng reads file data from disk. It returns an error on failure.
func SrcImgRulePng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/rule.png"
	name := "../src/img/rule.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSb_v_double_arrowPng reads file data from disk. It returns an error on failure.
func SrcImgSb_v_double_arrowPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/sb_v_double_arrow.png"
	name := "../src/img/sb_v_double_arrow.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSemiTransparentBgPng reads file data from disk. It returns an error on failure.
func SrcImgSemiTransparentBgPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/semi-transparent-bg.png"
	name := "../src/img/semi-transparent-bg.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgSpritePng reads file data from disk. It returns an error on failure.
func SrcImgSpritePng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/sprite.png"
	name := "../src/img/sprite.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_diagonalsThick_18_b81900_40x40Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_diagonalsThick_18_b81900_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	name := "../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_diagonalsThick_20_666666_40x40Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_diagonalsThick_20_666666_40x40Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	name := "../src/img/ui-bg_diagonals-thick_20_666666_40x40.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_flat_10_000000_40x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_flat_10_000000_40x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_flat_10_000000_40x100.png"
	name := "../src/img/ui-bg_flat_10_000000_40x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_100_f6f6f6_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_100_f6f6f6_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_100_f6f6f6_1x400.png"
	name := "../src/img/ui-bg_glass_100_f6f6f6_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_100_fdf5ce_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_100_fdf5ce_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_100_fdf5ce_1x400.png"
	name := "../src/img/ui-bg_glass_100_fdf5ce_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glass_65_ffffff_1x400Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glass_65_ffffff_1x400Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_glass_65_ffffff_1x400.png"
	name := "../src/img/ui-bg_glass_65_ffffff_1x400.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_glossWave_35_f6a828_500x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_glossWave_35_f6a828_500x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	name := "../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	name := "../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png reads file data from disk. It returns an error on failure.
func SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	name := "../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_222222_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_222222_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_222222_256x240.png"
	name := "../src/img/ui-icons_222222_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_228ef1_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_228ef1_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_228ef1_256x240.png"
	name := "../src/img/ui-icons_228ef1_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ef8c08_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ef8c08_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ef8c08_256x240.png"
	name := "../src/img/ui-icons_ef8c08_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ffd27a_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ffd27a_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ffd27a_256x240.png"
	name := "../src/img/ui-icons_ffd27a_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgUiIcons_ffffff_256x240Png reads file data from disk. It returns an error on failure.
func SrcImgUiIcons_ffffff_256x240Png() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/ui-icons_ffffff_256x240.png"
	name := "../src/img/ui-icons_ffffff_256x240.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcImgWmdButtonsPng reads file data from disk. It returns an error on failure.
func SrcImgWmdButtonsPng() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/img/wmd-buttons.png"
	name := "../src/img/wmd-buttons.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcIndexHtml reads file data from disk. It returns an error on failure.
func SrcIndexHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/index.html"
	name := "../src/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsAppJs reads file data from disk. It returns an error on failure.
func SrcJsAppJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/app.js"
	name := "../src/js/app.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesCookieutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesCookieutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/cookieUtils.js"
	name := "../src/js/classes/cookieUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesFlorenceJs reads file data from disk. It returns an error on failure.
func SrcJsClassesFlorenceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/florence.js"
	name := "../src/js/classes/florence.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesPathutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesPathutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/pathUtils.js"
	name := "../src/js/classes/pathUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsClassesStringutilsJs reads file data from disk. It returns an error on failure.
func SrcJsClassesStringutilsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/classes/stringUtils.js"
	name := "../src/js/classes/stringUtils.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_accordionJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_accordionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_accordion.js"
	name := "../src/js/components/_accordion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_fileinputJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_fileinputJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_fileInput.js"
	name := "../src/js/components/_fileInput.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_hidepanelJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_hidepanelJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_hidePanel.js"
	name := "../src/js/components/_hidePanel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsComponents_showpanelJs reads file data from disk. It returns an error on failure.
func SrcJsComponents_showpanelJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/components/_showPanel.js"
	name := "../src/js/components/_showPanel.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_contentdeletemarkerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_contentdeletemarkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_ContentDeleteMarker.js"
	name := "../src/js/functions/_ContentDeleteMarker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions__initJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions__initJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/__init.js"
	name := "../src/js/functions/__init.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_accordionsettingsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_accordionsettingsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_accordionSettings.js"
	name := "../src/js/functions/_accordionSettings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_autosizeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_autosizeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_autoSize.js"
	name := "../src/js/functions/_autoSize.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkforpagechangedJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkforpagechangedJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkForPageChanged.js"
	name := "../src/js/functions/_checkForPageChanged.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkpathparsedJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkpathparsedJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkPathParsed.js"
	name := "../src/js/functions/_checkPathParsed.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkpathslashesJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkpathslashesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkPathSlashes.js"
	name := "../src/js/functions/_checkPathSlashes.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_checkrenameuriJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_checkrenameuriJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_checkRenameUri.js"
	name := "../src/js/functions/_checkRenameUri.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_collectionhelpersJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_collectionhelpersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_collectionHelpers.js"
	name := "../src/js/functions/_collectionHelpers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_copypathJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_copypathJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_copyPath.js"
	name := "../src/js/functions/_copyPath.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_createcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_createcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_createCollection.js"
	name := "../src/js/functions/_createCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_createworkspaceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_createworkspaceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_createWorkspace.js"
	name := "../src/js/functions/_createWorkspace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteteamJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteteamJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteTeam.js"
	name := "../src/js/functions/_deleteTeam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteunpublishedversionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteunpublishedversionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteUnpublishedVersion.js"
	name := "../src/js/functions/_deleteUnpublishedVersion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_deleteuserJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_deleteuserJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_deleteUser.js"
	name := "../src/js/functions/_deleteUser.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editadddatasetJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editadddatasetJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddDataset.js"
	name := "../src/js/functions/_editAddDataset.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editaddfileJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editaddfileJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddFile.js"
	name := "../src/js/functions/_editAddFile.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editaddfilewithdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editaddfilewithdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAddFileWithDetails.js"
	name := "../src/js/functions/_editAddFileWithDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editalertJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editalertJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editAlert.js"
	name := "../src/js/functions/_editAlert.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editblocksJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editblocksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editBlocks.js"
	name := "../src/js/functions/_editBlocks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editCollection.js"
	name := "../src/js/functions/_editCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdatasetversionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdatasetversionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDatasetVersion.js"
	name := "../src/js/functions/_editDatasetVersion.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdateJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdateJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDate.js"
	name := "../src/js/functions/_editDate.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdocwithfilescorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdocwithfilescorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDocWithFilesCorrection.js"
	name := "../src/js/functions/_editDocWithFilesCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editdocumentcorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editdocumentcorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editDocumentCorrection.js"
	name := "../src/js/functions/_editDocumentCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editintlinksJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editintlinksJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editIntLinks.js"
	name := "../src/js/functions/_editIntLinks.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editmarkdownoneobjectJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editmarkdownoneobjectJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editMarkdownOneObject.js"
	name := "../src/js/functions/_editMarkdownOneObject.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editmarkdownwithnotitleJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editmarkdownwithnotitleJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editMarkdownWithNoTitle.js"
	name := "../src/js/functions/_editMarkdownWithNoTitle.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_editservicemessageJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_editservicemessageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editServiceMessage.js"
	name := "../src/js/functions/_editServiceMessage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_edittopicsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_edittopicsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_editTopics.js"
	name := "../src/js/functions/_editTopics.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_environmentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_environmentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_environment.js"
	name := "../src/js/functions/_environment.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_externallinkaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_externallinkaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_externalLinkAccordionSection.js"
	name := "../src/js/functions/_externalLinkAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_filedeleteJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_filedeleteJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_fileDelete.js"
	name := "../src/js/functions/_fileDelete.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_fileuploadJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_fileuploadJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_fileUpload.js"
	name := "../src/js/functions/_fileUpload.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getlastpositionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getlastpositionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getLastPosition.js"
	name := "../src/js/functions/_getLastPosition.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getnetworkstatusJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getnetworkstatusJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getNetworkStatus.js"
	name := "../src/js/functions/_getNetworkStatus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getparentpageJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getparentpageJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getParentPage.js"
	name := "../src/js/functions/_getParentPage.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getpathnametrimlastJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getpathnametrimlastJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getPathNameTrimLast.js"
	name := "../src/js/functions/_getPathNameTrimLast.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_getpreviewurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_getpreviewurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_getPreviewUrl.js"
	name := "../src/js/functions/_getPreviewUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_handleapierrorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_handleapierrorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_handleApiError.js"
	name := "../src/js/functions/_handleApiError.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_initialisenotemarkdownJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_initialisenotemarkdownJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_initialiseNoteMarkdown.js"
	name := "../src/js/functions/_initialiseNoteMarkdown.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_inputvalidationJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_inputvalidationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_inputValidation.js"
	name := "../src/js/functions/_inputValidation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadbrowsescreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadbrowsescreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadBrowseScreen.js"
	name := "../src/js/functions/_loadBrowseScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadchartbuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadchartbuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadChartBuilder.js"
	name := "../src/js/functions/_loadChartBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadchartslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadchartslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadChartsList.js"
	name := "../src/js/functions/_loadChartsList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatescreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatescreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreateScreen.js"
	name := "../src/js/functions/_loadCreateScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreator.js"
	name := "../src/js/functions/_loadCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadcreatordatepickerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadcreatordatepickerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadCreatorDatepicker.js"
	name := "../src/js/functions/_loadCreatorDatepicker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadembediframeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadembediframeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEmbedIframe.js"
	name := "../src/js/functions/_loadEmbedIframe.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadequationbuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadequationbuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEquationBuilder.js"
	name := "../src/js/functions/_loadEquationBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadequationslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadequationslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadEquationsList.js"
	name := "../src/js/functions/_loadEquationsList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimagebuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimagebuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImageBuilder.js"
	name := "../src/js/functions/_loadImageBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimageslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimageslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImagesList.js"
	name := "../src/js/functions/_loadImagesList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadimportscreenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadimportscreenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadImportScreen.js"
	name := "../src/js/functions/_loadImportScreen.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadmarkdowneditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadmarkdowneditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadMarkdownEditor.js"
	name := "../src/js/functions/_loadMarkdownEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadpagedataintoeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadpagedataintoeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadPageDataIntoEditor.js"
	name := "../src/js/functions/_loadPageDataIntoEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadparentlinkJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadparentlinkJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadParentLink.js"
	name := "../src/js/functions/_loadParentLink.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt16creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt16creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT16Creator.js"
	name := "../src/js/functions/_loadT16Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt4creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt4creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT4Creator.js"
	name := "../src/js/functions/_loadT4Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt6creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt6creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT6Creator.js"
	name := "../src/js/functions/_loadT6Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt7creatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt7creatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT7Creator.js"
	name := "../src/js/functions/_loadT7Creator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt8datasetcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt8datasetcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT8DatasetCreator.js"
	name := "../src/js/functions/_loadT8DatasetCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadt8landingcreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadt8landingcreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadT8LandingCreator.js"
	name := "../src/js/functions/_loadT8LandingCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadtablebuilderJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadtablebuilderJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadTableBuilder.js"
	name := "../src/js/functions/_loadTableBuilder.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadtableslistJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadtableslistJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadTablesList.js"
	name := "../src/js/functions/_loadTablesList.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_loadviscreatorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_loadviscreatorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_loadVisCreator.js"
	name := "../src/js/functions/_loadVisCreator.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_logoutJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_logoutJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_logout.js"
	name := "../src/js/functions/_logout.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_makeurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_makeurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_makeUrl.js"
	name := "../src/js/functions/_makeUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_markdowncontentaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_markdowncontentaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_markdownContentAccordionSection.js"
	name := "../src/js/functions/_markdownContentAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_markdownsetlinesJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_markdownsetlinesJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_markdownSetLines.js"
	name := "../src/js/functions/_markdownSetLines.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_menuselectsettingsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_menuselectsettingsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_menuSelectSettings.js"
	name := "../src/js/functions/_menuSelectSettings.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_movebrowsenodeJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_movebrowsenodeJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_moveBrowseNode.js"
	name := "../src/js/functions/_moveBrowseNode.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_parseurlJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_parseurlJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_parseUrl.js"
	name := "../src/js/functions/_parseUrl.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postapprovecollectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postapprovecollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postApproveCollection.js"
	name := "../src/js/functions/_postApproveCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postcompleteJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postcompleteJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postComplete.js"
	name := "../src/js/functions/_postComplete.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postcontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postcontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postContent.js"
	name := "../src/js/functions/_postContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postloginJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postloginJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postLogin.js"
	name := "../src/js/functions/_postLogin.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postreviewJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postReview.js"
	name := "../src/js/functions/_postReview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postteamJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postteamJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postTeam.js"
	name := "../src/js/functions/_postTeam.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_postuserJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_postuserJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_postUser.js"
	name := "../src/js/functions/_postUser.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_publishJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_publishJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_publish.js"
	name := "../src/js/functions/_publish.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_refreshpreviewJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_refreshpreviewJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_refreshPreview.js"
	name := "../src/js/functions/_refreshPreview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_relateditemaccordionsectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_relateditemaccordionsectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_relatedItemAccordionSection.js"
	name := "../src/js/functions/_relatedItemAccordionSection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renamechildrenJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renamechildrenJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renameChildren.js"
	name := "../src/js/functions/_renameChildren.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renamecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renamecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renameContent.js"
	name := "../src/js/functions/_renameContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_renderaccordionsectionsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_renderaccordionsectionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_renderAccordionSections.js"
	name := "../src/js/functions/_renderAccordionSections.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_resetJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_resetJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_reset.js"
	name := "../src/js/functions/_reset.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_savecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_savecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_saveContent.js"
	name := "../src/js/functions/_saveContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_savenewcorrectionJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_savenewcorrectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_saveNewCorrection.js"
	name := "../src/js/functions/_saveNewCorrection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_setshortcutsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_setshortcutsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_setShortcuts.js"
	name := "../src/js/functions/_setShortcuts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_setupflorenceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_setupflorenceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_setupFlorence.js"
	name := "../src/js/functions/_setupFlorence.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t16releaseeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t16releaseeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t16ReleaseEditor.js"
	name := "../src/js/functions/_t16ReleaseEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t1editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t1editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t1Editor.js"
	name := "../src/js/functions/_t1Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t1editorcensusJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t1editorcensusJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t1EditorCensus.js"
	name := "../src/js/functions/_t1EditorCensus.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t2editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t2editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t2Editor.js"
	name := "../src/js/functions/_t2Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t3editorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t3editorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t3Editor.js"
	name := "../src/js/functions/_t3Editor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4articledownloadeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4articledownloadeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4ArticleDownloadEditor.js"
	name := "../src/js/functions/_t4ArticleDownloadEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4articleeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4articleeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4ArticleEditor.js"
	name := "../src/js/functions/_t4ArticleEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t4bulletineditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t4bulletineditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t4BulletinEditor.js"
	name := "../src/js/functions/_t4BulletinEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t5timeserieseditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t5timeserieseditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t5TimeseriesEditor.js"
	name := "../src/js/functions/_t5TimeseriesEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumchaptereditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumchaptereditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumChapterEditor.js"
	name := "../src/js/functions/_t6CompendiumChapterEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumdataeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumdataeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumDataEditor.js"
	name := "../src/js/functions/_t6CompendiumDataEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t6compendiumeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t6compendiumeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t6CompendiumEditor.js"
	name := "../src/js/functions/_t6CompendiumEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7adhoceditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7adhoceditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7AdHocEditor.js"
	name := "../src/js/functions/_t7AdHocEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7foieditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7foieditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7FoiEditor.js"
	name := "../src/js/functions/_t7FoiEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7methodologydownloadeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7methodologydownloadeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7MethodologyDownloadEditor.js"
	name := "../src/js/functions/_t7MethodologyDownloadEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7methodologyeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7methodologyeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7MethodologyEditor.js"
	name := "../src/js/functions/_t7MethodologyEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7qmieditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7qmieditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7QmiEditor.js"
	name := "../src/js/functions/_t7QmiEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticarticleeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticarticleeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticArticleEditor.js"
	name := "../src/js/functions/_t7StaticArticleEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticlandingpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticlandingpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticLandingPageEditor.js"
	name := "../src/js/functions/_t7StaticLandingPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t7staticpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t7staticpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t7StaticPageEditor.js"
	name := "../src/js/functions/_t7StaticPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t8dataseteditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t8dataseteditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t8DatasetEditor.js"
	name := "../src/js/functions/_t8DatasetEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_t8landingpageeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_t8landingpageeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_t8LandingPageEditor.js"
	name := "../src/js/functions/_t8LandingPageEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_transferJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_transferJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_transfer.js"
	name := "../src/js/functions/_transfer.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_treenodeselectJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_treenodeselectJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_treeNodeSelect.js"
	name := "../src/js/functions/_treeNodeSelect.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_uiJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_uiJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_ui.js"
	name := "../src/js/functions/_ui.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_uitidyupJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_uitidyupJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_uiTidyup.js"
	name := "../src/js/functions/_uiTidyup.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_updatecontentJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_updatecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_updateContent.js"
	name := "../src/js/functions/_updateContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewchangepasswordJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewchangepasswordJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewChangePassword.js"
	name := "../src/js/functions/_viewChangePassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcollectiondetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcollectiondetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewCollectionDetails.js"
	name := "../src/js/functions/_viewCollectionDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcollectionsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcollectionsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewCollections.js"
	name := "../src/js/functions/_viewCollections.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewcontrollerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewcontrollerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewController.js"
	name := "../src/js/functions/_viewController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewloginJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewloginJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewLogIn.js"
	name := "../src/js/functions/_viewLogIn.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewpublishJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewpublishJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewPublish.js"
	name := "../src/js/functions/_viewPublish.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewpublishdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewpublishdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewPublishDetails.js"
	name := "../src/js/functions/_viewPublishDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreleaseselectorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreleaseselectorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReleaseSelector.js"
	name := "../src/js/functions/_viewReleaseSelector.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreportdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreportdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReportDetails.js"
	name := "../src/js/functions/_viewReportDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewreportsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewreportsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewReports.js"
	name := "../src/js/functions/_viewReports.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewteamdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewteamdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewTeamDetails.js"
	name := "../src/js/functions/_viewTeamDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewteamsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewteamsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewTeams.js"
	name := "../src/js/functions/_viewTeams.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewuserdetailsJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewuserdetailsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewUserDetails.js"
	name := "../src/js/functions/_viewUserDetails.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewusersJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewusersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewUsers.js"
	name := "../src/js/functions/_viewUsers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_viewworkspaceJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_viewworkspaceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_viewWorkspace.js"
	name := "../src/js/functions/_viewWorkspace.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctions_visualisationeditorJs reads file data from disk. It returns an error on failure.
func SrcJsFunctions_visualisationeditorJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/_visualisationEditor.js"
	name := "../src/js/functions/_visualisationEditor.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsFunctionsRegisterserviceworkerJs reads file data from disk. It returns an error on failure.
func SrcJsFunctionsRegisterserviceworkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/functions/registerServiceWorker.js"
	name := "../src/js/functions/registerServiceWorker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyHighchartsJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyHighchartsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/highcharts.js"
	name := "../src/js/third-party/highcharts.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsThirdPartyReduxMinJs reads file data from disk. It returns an error on failure.
func SrcJsThirdPartyReduxMinJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/third-party/redux.min.js"
	name := "../src/js/third-party/redux.min.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deletecollectionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deletecollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteCollection.js"
	name := "../src/js/zebedee-api/_deleteCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deletecontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deletecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteContent.js"
	name := "../src/js/zebedee-api/_deleteContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_deleteequationJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_deleteequationJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_deleteEquation.js"
	name := "../src/js/zebedee-api/_deleteEquation.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getcollectionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getcollectionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getCollection.js"
	name := "../src/js/zebedee-api/_getCollection.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getpagedataJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getpagedataJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getPageData.js"
	name := "../src/js/zebedee-api/_getPageData.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getpageresourceJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getpageresourceJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getPageResource.js"
	name := "../src/js/zebedee-api/_getPageResource.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getteamsJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getteamsJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getTeams.js"
	name := "../src/js/zebedee-api/_getTeams.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getuserpermissionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getuserpermissionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getUserPermission.js"
	name := "../src/js/zebedee-api/_getUserPermission.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_getusersJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_getusersJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_getUsers.js"
	name := "../src/js/zebedee-api/_getUsers.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_movecontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_movecontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_moveContent.js"
	name := "../src/js/zebedee-api/_moveContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_postpasswordJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_postpasswordJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_postPassword.js"
	name := "../src/js/zebedee-api/_postPassword.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_postpermissionJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_postpermissionJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_postPermission.js"
	name := "../src/js/zebedee-api/_postPermission.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcJsZebedeeApi_putcontentJs reads file data from disk. It returns an error on failure.
func SrcJsZebedeeApi_putcontentJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/js/zebedee-api/_putContent.js"
	name := "../src/js/zebedee-api/_putContent.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcManifestJson reads file data from disk. It returns an error on failure.
func SrcManifestJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/manifest.json"
	name := "../src/manifest.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcPackageJson reads file data from disk. It returns an error on failure.
func SrcPackageJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/package.json"
	name := "../src/package.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_accordionScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_accordionScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_accordion.scss"
	name := "../src/scss/components/_accordion.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_builderScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_builderScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_builder.scss"
	name := "../src/scss/components/_builder.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_editorSectionScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_editorSectionScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_editor-section.scss"
	name := "../src/scss/components/_editor-section.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_iconsScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_iconsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_icons.scss"
	name := "../src/scss/components/_icons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_markdownEditorScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_markdownEditorScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_markdown-editor.scss"
	name := "../src/scss/components/_markdown-editor.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_networkStatusScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_networkStatusScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_network-status.scss"
	name := "../src/scss/components/_network-status.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_pageScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_pageScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_page.scss"
	name := "../src/scss/components/_page.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssComponents_sliderScss reads file data from disk. It returns an error on failure.
func SrcScssComponents_sliderScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/components/_slider.scss"
	name := "../src/scss/components/_slider.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_buttonsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_buttonsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_buttons.scss"
	name := "../src/scss/elements/_buttons.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_formsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_formsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_forms.scss"
	name := "../src/scss/elements/_forms.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_inputsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_inputsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_inputs.scss"
	name := "../src/scss/elements/_inputs.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_listsScss reads file data from disk. It returns an error on failure.
func SrcScssElements_listsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_lists.scss"
	name := "../src/scss/elements/_lists.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_navScss reads file data from disk. It returns an error on failure.
func SrcScssElements_navScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_nav.scss"
	name := "../src/scss/elements/_nav.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_tablesScss reads file data from disk. It returns an error on failure.
func SrcScssElements_tablesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_tables.scss"
	name := "../src/scss/elements/_tables.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssElements_typographyScss reads file data from disk. It returns an error on failure.
func SrcScssElements_typographyScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/elements/_typography.scss"
	name := "../src/scss/elements/_typography.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssMainScss reads file data from disk. It returns an error on failure.
func SrcScssMainScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/main.scss"
	name := "../src/scss/main.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_baseScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_baseScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_base.scss"
	name := "../src/scss/partials/_base.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_collectionsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_collectionsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_collections.scss"
	name := "../src/scss/partials/_collections.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_colourPaletteScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_colourPaletteScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_colour-palette.scss"
	name := "../src/scss/partials/_colour-palette.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_elementsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_elementsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_elements.scss"
	name := "../src/scss/partials/_elements.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_fontsScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_fontsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_fonts.scss"
	name := "../src/scss/partials/_fonts.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_jquiScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_jquiScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_jqui.scss"
	name := "../src/scss/partials/_jqui.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_publishScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_publishScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_publish.scss"
	name := "../src/scss/partials/_publish.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_resetScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_resetScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_reset.scss"
	name := "../src/scss/partials/_reset.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_shameScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_shameScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_shame.scss"
	name := "../src/scss/partials/_shame.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_utilitiesScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_utilitiesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_utilities.scss"
	name := "../src/scss/partials/_utilities.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssPartials_workspaceScss reads file data from disk. It returns an error on failure.
func SrcScssPartials_workspaceScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/partials/_workspace.scss"
	name := "../src/scss/partials/_workspace.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_displayScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_displayScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_display.scss"
	name := "../src/scss/utilities/_display.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_gridScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_gridScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_grid.scss"
	name := "../src/scss/utilities/_grid.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_marginScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_marginScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_margin.scss"
	name := "../src/scss/utilities/_margin.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_mixinsScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_mixinsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_mixins.scss"
	name := "../src/scss/utilities/_mixins.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_paddingScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_paddingScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_padding.scss"
	name := "../src/scss/utilities/_padding.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_panelsScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_panelsScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_panels.scss"
	name := "../src/scss/utilities/_panels.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcScssUtilities_utilitiesScss reads file data from disk. It returns an error on failure.
func SrcScssUtilities_utilitiesScss() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/scss/utilities/_utilities.scss"
	name := "../src/scss/utilities/_utilities.scss"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcServiceWorkerJs reads file data from disk. It returns an error on failure.
func SrcServiceWorkerJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/service-worker.js"
	name := "../src/service-worker.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesFlorencespecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesFlorencespecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/FlorenceSpec.js"
	name := "../src/spec/classes/FlorenceSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesPathutilsspecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesPathutilsspecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/PathUtilsSpec.js"
	name := "../src/spec/classes/PathUtilsSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecClassesStringutilsspecJs reads file data from disk. It returns an error on failure.
func SrcSpecClassesStringutilsspecJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/classes/StringUtilsSpec.js"
	name := "../src/spec/classes/StringUtilsSpec.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcSpecSupportJasmineJson reads file data from disk. It returns an error on failure.
func SrcSpecSupportJasmineJson() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/spec/support/jasmine.json"
	name := "../src/spec/support/jasmine.json"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBlockmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBlockmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/blockModal.handlebars"
	name := "../src/templates/blockModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBlocknewsmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBlocknewsmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/blockNewsModal.handlebars"
	name := "../src/templates/blockNewsModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBrowsenodeHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBrowsenodeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/browseNode.handlebars"
	name := "../src/templates/browseNode.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesBrowsenodedatavisHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesBrowsenodedatavisHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/browseNodeDataVis.handlebars"
	name := "../src/templates/browseNodeDataVis.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChangepasswordHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChangepasswordHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/changePassword.handlebars"
	name := "../src/templates/changePassword.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChartbuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChartbuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartBuilder.handlebars"
	name := "../src/templates/chartBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditbarchartextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditbarchartextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditBarChartExtras.handlebars"
	name := "../src/templates/chartEditBarChartExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditbarlineextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditbarlineextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditBarlineExtras.handlebars"
	name := "../src/templates/chartEditBarlineExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditdualaxisextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditdualaxisextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditDualAxisExtras.handlebars"
	name := "../src/templates/chartEditDualAxisExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCharteditlinechartextrasHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCharteditlinechartextrasHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/chartEditLineChartExtras.handlebars"
	name := "../src/templates/chartEditLineChartExtras.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesChilddeletesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesChilddeletesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/childDeletes.handlebars"
	name := "../src/templates/childDeletes.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectiondetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectiondetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionDetails.handlebars"
	name := "../src/templates/collectionDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectioneditHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectioneditHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionEdit.handlebars"
	name := "../src/templates/collectionEdit.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesCollectionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesCollectionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/collectionList.handlebars"
	name := "../src/templates/collectionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditnavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditnavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editNav.handlebars"
	name := "../src/templates/editNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditnavchildHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditnavchildHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editNavChild.handlebars"
	name := "../src/templates/editNavChild.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditoralertHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditoralertHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorAlert.handlebars"
	name := "../src/templates/editorAlert.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcompendiumdatasetfilesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcompendiumdatasetfilesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorCompendiumDatasetFiles.handlebars"
	name := "../src/templates/editorCompendiumDatasetFiles.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContent.handlebars"
	name := "../src/templates/editorContent.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentnotitleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentnotitleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContentNoTitle.handlebars"
	name := "../src/templates/editorContentNoTitle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcontentoneHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcontentoneHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorContentOne.handlebars"
	name := "../src/templates/editorContentOne.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorcorrectionHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorcorrectionHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorCorrection.handlebars"
	name := "../src/templates/editorCorrection.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordateHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordateHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDate.handlebars"
	name := "../src/templates/editorDate.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordocwithfilesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordocwithfilesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDocWithFiles.handlebars"
	name := "../src/templates/editorDocWithFiles.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordownloadsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordownloadsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDownloads.handlebars"
	name := "../src/templates/editorDownloads.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditordownloadswithsummaryHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditordownloadswithsummaryHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorDownloadsWithSummary.handlebars"
	name := "../src/templates/editorDownloadsWithSummary.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorlinksHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorlinksHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorLinks.handlebars"
	name := "../src/templates/editorLinks.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorrelatedHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorrelatedHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorRelated.handlebars"
	name := "../src/templates/editorRelated.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditorservicemessageHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditorservicemessageHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorServiceMessage.handlebars"
	name := "../src/templates/editorServiceMessage.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditort1blocksHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditort1blocksHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorT1Blocks.handlebars"
	name := "../src/templates/editorT1Blocks.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEditortopicsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEditortopicsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/editorTopics.handlebars"
	name := "../src/templates/editorTopics.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEmbediframeHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEmbediframeHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/embedIframe.handlebars"
	name := "../src/templates/embedIframe.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesEquationbuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesEquationbuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/equationBuilder.handlebars"
	name := "../src/templates/equationBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesFlorenceHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesFlorenceHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/florence.handlebars"
	name := "../src/templates/florence.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesIframenavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesIframenavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/iframeNav.handlebars"
	name := "../src/templates/iframeNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesImagebuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesImagebuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/imageBuilder.handlebars"
	name := "../src/templates/imageBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLinkexternalmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLinkexternalmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/linkExternalModal.handlebars"
	name := "../src/templates/linkExternalModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLinkmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLinkmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/linkModal.handlebars"
	name := "../src/templates/linkModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLoadinganimationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLoadinganimationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/loadingAnimation.handlebars"
	name := "../src/templates/loadingAnimation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesLoginHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesLoginHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/login.handlebars"
	name := "../src/templates/login.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMainnavHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMainnavHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/mainNav.handlebars"
	name := "../src/templates/mainNav.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMarkdowneditorHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMarkdowneditorHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/markdownEditor.handlebars"
	name := "../src/templates/markdownEditor.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesMarkdowneditornotitleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesMarkdowneditornotitleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/markdownEditorNoTitle.handlebars"
	name := "../src/templates/markdownEditorNoTitle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesPublishdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesPublishdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/publishDetails.handlebars"
	name := "../src/templates/publishDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesPublishlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesPublishlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/publishList.handlebars"
	name := "../src/templates/publishList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesRelatedmodalHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesRelatedmodalHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/relatedModal.handlebars"
	name := "../src/templates/relatedModal.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReleaseselectorHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReleaseselectorHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/releaseSelector.handlebars"
	name := "../src/templates/releaseSelector.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportList.handlebars"
	name := "../src/templates/reportList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportpublisheddetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportpublisheddetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportPublishedDetails.handlebars"
	name := "../src/templates/reportPublishedDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesReportunpublisheddetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesReportunpublisheddetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/reportUnpublishedDetails.handlebars"
	name := "../src/templates/reportUnpublishedDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesSelectorhourHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesSelectorhourHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/selectorHour.handlebars"
	name := "../src/templates/selectorHour.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesSelectorminuteHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesSelectorminuteHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/selectorMinute.handlebars"
	name := "../src/templates/selectorMinute.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTablebuilderHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTablebuilderHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/tableBuilder.handlebars"
	name := "../src/templates/tableBuilder.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeamdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeamdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamDetails.handlebars"
	name := "../src/templates/teamDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeameditHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeameditHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamEdit.handlebars"
	name := "../src/templates/teamEdit.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTeamlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTeamlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/teamList.handlebars"
	name := "../src/templates/teamList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesTickanimationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesTickanimationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/tickAnimation.handlebars"
	name := "../src/templates/tickAnimation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUploadfileformHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUploadfileformHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/uploadFileForm.handlebars"
	name := "../src/templates/uploadFileForm.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUserdetailsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUserdetailsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/userDetails.handlebars"
	name := "../src/templates/userDetails.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesUserlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesUserlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/userList.handlebars"
	name := "../src/templates/userList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkbrowseHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkbrowseHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workBrowse.handlebars"
	name := "../src/templates/workBrowse.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkcreateHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkcreateHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workCreate.handlebars"
	name := "../src/templates/workCreate.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditchartsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditchartsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditCharts.handlebars"
	name := "../src/templates/workEditCharts.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditequationsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditequationsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditEquations.handlebars"
	name := "../src/templates/workEditEquations.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditimagesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditimagesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditImages.handlebars"
	name := "../src/templates/workEditImages.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1.handlebars"
	name := "../src/templates/workEditT1.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt16Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt16Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT16.handlebars"
	name := "../src/templates/workEditT16.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1censusHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1censusHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1Census.handlebars"
	name := "../src/templates/workEditT1Census.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt1sectionsHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt1sectionsHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT1Sections.handlebars"
	name := "../src/templates/workEditT1Sections.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt2Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt2Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT2.handlebars"
	name := "../src/templates/workEditT2.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt3Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt3Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT3.handlebars"
	name := "../src/templates/workEditT3.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4articleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4articleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Article.handlebars"
	name := "../src/templates/workEditT4Article.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4articledownloadHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4articledownloadHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4ArticleDownload.handlebars"
	name := "../src/templates/workEditT4ArticleDownload.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4bulletinHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4bulletinHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Bulletin.handlebars"
	name := "../src/templates/workEditT4Bulletin.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4compendiumHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4compendiumHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Compendium.handlebars"
	name := "../src/templates/workEditT4Compendium.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt4methodologyHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt4methodologyHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT4Methodology.handlebars"
	name := "../src/templates/workEditT4Methodology.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt5Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt5Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT5.handlebars"
	name := "../src/templates/workEditT5.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6.handlebars"
	name := "../src/templates/workEditT6.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6chapterHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6chapterHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6Chapter.handlebars"
	name := "../src/templates/workEditT6Chapter.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt6datasetHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt6datasetHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT6Dataset.handlebars"
	name := "../src/templates/workEditT6Dataset.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7.handlebars"
	name := "../src/templates/workEditT7.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7landingHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7landingHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7Landing.handlebars"
	name := "../src/templates/workEditT7Landing.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt7staticarticleHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt7staticarticleHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT7StaticArticle.handlebars"
	name := "../src/templates/workEditT7StaticArticle.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8Handlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8Handlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8.handlebars"
	name := "../src/templates/workEditT8.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8compendiumHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8compendiumHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8Compendium.handlebars"
	name := "../src/templates/workEditT8Compendium.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8correctionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8correctionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8CorrectionList.handlebars"
	name := "../src/templates/workEditT8CorrectionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8landingdatasetlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8landingdatasetlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8LandingDatasetList.handlebars"
	name := "../src/templates/workEditT8LandingDatasetList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8landingpageHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8landingpageHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8LandingPage.handlebars"
	name := "../src/templates/workEditT8LandingPage.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditt8versionlistHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditt8versionlistHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditT8VersionList.handlebars"
	name := "../src/templates/workEditT8VersionList.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkedittablesHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkedittablesHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditTables.handlebars"
	name := "../src/templates/workEditTables.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkeditvisualisationHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkeditvisualisationHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workEditVisualisation.handlebars"
	name := "../src/templates/workEditVisualisation.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkimportHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkimportHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workImport.handlebars"
	name := "../src/templates/workImport.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcTemplatesWorkspaceHandlebars reads file data from disk. It returns an error on failure.
func SrcTemplatesWorkspaceHandlebars() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/templates/workSpace.handlebars"
	name := "../src/templates/workSpace.handlebars"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcWebpackConfigTestJs reads file data from disk. It returns an error on failure.
func SrcWebpackConfigTestJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/webpack.config-test.js"
	name := "../src/webpack.config-test.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcWebpackConfigJs reads file data from disk. It returns an error on failure.
func SrcWebpackConfigJs() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/webpack.config.js"
	name := "../src/webpack.config.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// SrcWebpackHtml reads file data from disk. It returns an error on failure.
func SrcWebpackHtml() (*asset, error) {
	path := "/Users/crispinmerriman/Git/onsdigital/florence/src/webpack.html"
	name := "../src/webpack.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../src/.DS_Store": SrcDs_store,
	"../src/app/app.js": SrcAppAppJs,
	"../src/app/shared/api/getActivePage.js": SrcAppSharedApiGetactivepageJs,
	"../src/app/shared/api/getBrowseTree.js": SrcAppSharedApiGetbrowsetreeJs,
	"../src/app/shared/api/saveNewPage.js": SrcAppSharedApiSavenewpageJs,
	"../src/app/shared/api/updatePage.js": SrcAppSharedApiUpdatepageJs,
	"../src/app/shared/models/pageModels.js": SrcAppSharedModelsPagemodelsJs,
	"../src/app/shared/state/baseUrlState.js": SrcAppSharedStateBaseurlstateJs,
	"../src/app/shared/state/collectionState.js": SrcAppSharedStateCollectionstateJs,
	"../src/app/shared/state/state.js": SrcAppSharedStateStateJs,
	"../src/app/shared/state/userState.js": SrcAppSharedStateUserstateJs,
	"../src/app/shared/state/watchState.js": SrcAppSharedStateWatchstateJs,
	"../src/app/shared/state/workspaceState.js": SrcAppSharedStateWorkspacestateJs,
	"../src/app/shared/templateHelpers/ifCond.js": SrcAppSharedTemplatehelpersIfcondJs,
	"../src/app/shared/templatePartials/loadingAnimation.handlebars": SrcAppSharedTemplatepartialsLoadinganimationHandlebars,
	"../src/app/shared/utilities/bindDatePicker.js": SrcAppSharedUtilitiesBinddatepickerJs,
	"../src/app/shared/utilities/get.js": SrcAppSharedUtilitiesGetJs,
	"../src/app/shared/utilities/post.js": SrcAppSharedUtilitiesPostJs,
	"../src/app/shared/utilities/utilities.js": SrcAppSharedUtilitiesUtilitiesJs,
	"../src/app/shared/utilities/utilities.test.js": SrcAppSharedUtilitiesUtilitiesTestJs,
	"../src/app/workspace/browse/browse.handlebars": SrcAppWorkspaceBrowseBrowseHandlebars,
	"../src/app/workspace/browse/browseController.js": SrcAppWorkspaceBrowseBrowsecontrollerJs,
	"../src/app/workspace/browse/browseNode.handlebars": SrcAppWorkspaceBrowseBrowsenodeHandlebars,
	"../src/app/workspace/browse/browseView.js": SrcAppWorkspaceBrowseBrowseviewJs,
	"../src/app/workspace/browse/browseVisNode.handlebars": SrcAppWorkspaceBrowseBrowsevisnodeHandlebars,
	"../src/app/workspace/create/create.handlebars": SrcAppWorkspaceCreateCreateHandlebars,
	"../src/app/workspace/create/createController.js": SrcAppWorkspaceCreateCreatecontrollerJs,
	"../src/app/workspace/create/createView.js": SrcAppWorkspaceCreateCreateviewJs,
	"../src/app/workspace/edit/edit.handlebars": SrcAppWorkspaceEditEditHandlebars,
	"../src/app/workspace/edit/editAccordion.handlebars": SrcAppWorkspaceEditEditaccordionHandlebars,
	"../src/app/workspace/edit/editController.js": SrcAppWorkspaceEditEditcontrollerJs,
	"../src/app/workspace/edit/editView.js": SrcAppWorkspaceEditEditviewJs,
	"../src/app/workspace/navigation/navigation.handlebars": SrcAppWorkspaceNavigationNavigationHandlebars,
	"../src/app/workspace/navigation/navigationController.js": SrcAppWorkspaceNavigationNavigationcontrollerJs,
	"../src/app/workspace/navigation/navigationView.js": SrcAppWorkspaceNavigationNavigationviewJs,
	"../src/app/workspace/preview/preview.handlebars": SrcAppWorkspacePreviewPreviewHandlebars,
	"../src/app/workspace/preview/previewController.js": SrcAppWorkspacePreviewPreviewcontrollerJs,
	"../src/app/workspace/preview/previewView.js": SrcAppWorkspacePreviewPreviewviewJs,
	"../src/app/workspace/workspace.handlebars": SrcAppWorkspaceWorkspaceHandlebars,
	"../src/app/workspace/workspaceController.js": SrcAppWorkspaceWorkspacecontrollerJs,
	"../src/app/workspace/workspaceView.js": SrcAppWorkspaceWorkspaceviewJs,
	"../src/assets/css/main.min.css": SrcAssetsCssMainMinCss,
	"../src/assets/css/main.min.css.map": SrcAssetsCssMainMinCssMap,
	"../src/assets/js/bundle.js": SrcAssetsJsBundleJs,
	"../src/assets/js/main.js": SrcAssetsJsMainJs,
	"../src/assets/js/templates.js": SrcAssetsJsTemplatesJs,
	"../src/assets/version.json": SrcAssetsVersionJson,
	"../src/css/florence.css": SrcCssFlorenceCss,
	"../src/css/rapid-prototype-main.css": SrcCssRapidPrototypeMainCss,
	"../src/css/third-party/c3.css": SrcCssThirdPartyC3Css,
	"../src/css/third-party/jquery-ui.theme.min.css": SrcCssThirdPartyJqueryUiThemeMinCss,
	"../src/css/third-party/jquery.tagit.css": SrcCssThirdPartyJqueryTagitCss,
	"../src/css/third-party/pagedown.css": SrcCssThirdPartyPagedownCss,
	"../src/css/third-party/responsive-tables.css": SrcCssThirdPartyResponsiveTablesCss,
	"../src/css/third-party/sweetalert.css": SrcCssThirdPartySweetalertCss,
	"../src/css/third-party/tagit.ui-zendesk.css": SrcCssThirdPartyTagitUiZendeskCss,
	"../src/font/Open_Sans/LICENSE.txt": SrcFontOpen_sansLicenseTxt,
	"../src/font/Open_Sans/OpenSans-Bold.eot": SrcFontOpen_sansOpensansBoldEot,
	"../src/font/Open_Sans/OpenSans-Bold.svg": SrcFontOpen_sansOpensansBoldSvg,
	"../src/font/Open_Sans/OpenSans-Bold.ttf": SrcFontOpen_sansOpensansBoldTtf,
	"../src/font/Open_Sans/OpenSans-Bold.woff": SrcFontOpen_sansOpensansBoldWoff,
	"../src/font/Open_Sans/OpenSans-Bold.woff2": SrcFontOpen_sansOpensansBoldWoff2,
	"../src/font/Open_Sans/OpenSans-BoldItalic.eot": SrcFontOpen_sansOpensansBolditalicEot,
	"../src/font/Open_Sans/OpenSans-BoldItalic.svg": SrcFontOpen_sansOpensansBolditalicSvg,
	"../src/font/Open_Sans/OpenSans-BoldItalic.ttf": SrcFontOpen_sansOpensansBolditalicTtf,
	"../src/font/Open_Sans/OpenSans-BoldItalic.woff": SrcFontOpen_sansOpensansBolditalicWoff,
	"../src/font/Open_Sans/OpenSans-ExtraBold.eot": SrcFontOpen_sansOpensansExtraboldEot,
	"../src/font/Open_Sans/OpenSans-ExtraBold.svg": SrcFontOpen_sansOpensansExtraboldSvg,
	"../src/font/Open_Sans/OpenSans-ExtraBold.ttf": SrcFontOpen_sansOpensansExtraboldTtf,
	"../src/font/Open_Sans/OpenSans-ExtraBold.woff": SrcFontOpen_sansOpensansExtraboldWoff,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.eot": SrcFontOpen_sansOpensansExtrabolditalicEot,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.svg": SrcFontOpen_sansOpensansExtrabolditalicSvg,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.ttf": SrcFontOpen_sansOpensansExtrabolditalicTtf,
	"../src/font/Open_Sans/OpenSans-ExtraBoldItalic.woff": SrcFontOpen_sansOpensansExtrabolditalicWoff,
	"../src/font/Open_Sans/OpenSans-Italic.eot": SrcFontOpen_sansOpensansItalicEot,
	"../src/font/Open_Sans/OpenSans-Italic.svg": SrcFontOpen_sansOpensansItalicSvg,
	"../src/font/Open_Sans/OpenSans-Italic.ttf": SrcFontOpen_sansOpensansItalicTtf,
	"../src/font/Open_Sans/OpenSans-Italic.woff": SrcFontOpen_sansOpensansItalicWoff,
	"../src/font/Open_Sans/OpenSans-Light.eot": SrcFontOpen_sansOpensansLightEot,
	"../src/font/Open_Sans/OpenSans-Light.svg": SrcFontOpen_sansOpensansLightSvg,
	"../src/font/Open_Sans/OpenSans-Light.ttf": SrcFontOpen_sansOpensansLightTtf,
	"../src/font/Open_Sans/OpenSans-Light.woff": SrcFontOpen_sansOpensansLightWoff,
	"../src/font/Open_Sans/OpenSans-Light.woff2": SrcFontOpen_sansOpensansLightWoff2,
	"../src/font/Open_Sans/OpenSans-LightItalic.eot": SrcFontOpen_sansOpensansLightitalicEot,
	"../src/font/Open_Sans/OpenSans-LightItalic.svg": SrcFontOpen_sansOpensansLightitalicSvg,
	"../src/font/Open_Sans/OpenSans-LightItalic.ttf": SrcFontOpen_sansOpensansLightitalicTtf,
	"../src/font/Open_Sans/OpenSans-LightItalic.woff": SrcFontOpen_sansOpensansLightitalicWoff,
	"../src/font/Open_Sans/OpenSans-Regular.eot": SrcFontOpen_sansOpensansRegularEot,
	"../src/font/Open_Sans/OpenSans-Regular.svg": SrcFontOpen_sansOpensansRegularSvg,
	"../src/font/Open_Sans/OpenSans-Regular.ttf": SrcFontOpen_sansOpensansRegularTtf,
	"../src/font/Open_Sans/OpenSans-Regular.woff": SrcFontOpen_sansOpensansRegularWoff,
	"../src/font/Open_Sans/OpenSans-Regular.woff2": SrcFontOpen_sansOpensansRegularWoff2,
	"../src/font/Open_Sans/OpenSans-Semibold.eot": SrcFontOpen_sansOpensansSemiboldEot,
	"../src/font/Open_Sans/OpenSans-Semibold.svg": SrcFontOpen_sansOpensansSemiboldSvg,
	"../src/font/Open_Sans/OpenSans-Semibold.ttf": SrcFontOpen_sansOpensansSemiboldTtf,
	"../src/font/Open_Sans/OpenSans-Semibold.woff": SrcFontOpen_sansOpensansSemiboldWoff,
	"../src/font/Open_Sans/OpenSans-Semibold.woff2": SrcFontOpen_sansOpensansSemiboldWoff2,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.eot": SrcFontOpen_sansOpensansSemibolditalicEot,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.svg": SrcFontOpen_sansOpensansSemibolditalicSvg,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.ttf": SrcFontOpen_sansOpensansSemibolditalicTtf,
	"../src/font/Open_Sans/OpenSans-SemiboldItalic.woff": SrcFontOpen_sansOpensansSemibolditalicWoff,
	"../src/font/Roboto_Slab/LICENSE.txt": SrcFontRoboto_slabLicenseTxt,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.eot": SrcFontRoboto_slabRobotoslabBoldEot,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.svg": SrcFontRoboto_slabRobotoslabBoldSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.ttf": SrcFontRoboto_slabRobotoslabBoldTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.woff": SrcFontRoboto_slabRobotoslabBoldWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Bold.woff2": SrcFontRoboto_slabRobotoslabBoldWoff2,
	"../src/font/Roboto_Slab/RobotoSlab-Light.eot": SrcFontRoboto_slabRobotoslabLightEot,
	"../src/font/Roboto_Slab/RobotoSlab-Light.svg": SrcFontRoboto_slabRobotoslabLightSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Light.ttf": SrcFontRoboto_slabRobotoslabLightTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Light.woff": SrcFontRoboto_slabRobotoslabLightWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.eot": SrcFontRoboto_slabRobotoslabRegularEot,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.svg": SrcFontRoboto_slabRobotoslabRegularSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.ttf": SrcFontRoboto_slabRobotoslabRegularTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.woff": SrcFontRoboto_slabRobotoslabRegularWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Regular.woff2": SrcFontRoboto_slabRobotoslabRegularWoff2,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.eot": SrcFontRoboto_slabRobotoslabThinEot,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.svg": SrcFontRoboto_slabRobotoslabThinSvg,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.ttf": SrcFontRoboto_slabRobotoslabThinTtf,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.woff": SrcFontRoboto_slabRobotoslabThinWoff,
	"../src/font/Roboto_Slab/RobotoSlab-Thin.woff2": SrcFontRoboto_slabRobotoslabThinWoff2,
	"../src/font/Ubuntu_Mono/UFL.txt": SrcFontUbuntu_monoUflTxt,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.eot": SrcFontUbuntu_monoUbuntumonoBoldEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.svg": SrcFontUbuntu_monoUbuntumonoBoldSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.ttf": SrcFontUbuntu_monoUbuntumonoBoldTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff": SrcFontUbuntu_monoUbuntumonoBoldWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Bold.woff2": SrcFontUbuntu_monoUbuntumonoBoldWoff2,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.eot": SrcFontUbuntu_monoUbuntumonoBolditalicEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.svg": SrcFontUbuntu_monoUbuntumonoBolditalicSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.ttf": SrcFontUbuntu_monoUbuntumonoBolditalicTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-BoldItalic.woff": SrcFontUbuntu_monoUbuntumonoBolditalicWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.eot": SrcFontUbuntu_monoUbuntumonoItalicEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.svg": SrcFontUbuntu_monoUbuntumonoItalicSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.ttf": SrcFontUbuntu_monoUbuntumonoItalicTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Italic.woff": SrcFontUbuntu_monoUbuntumonoItalicWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.eot": SrcFontUbuntu_monoUbuntumonoRegularEot,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.svg": SrcFontUbuntu_monoUbuntumonoRegularSvg,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.ttf": SrcFontUbuntu_monoUbuntumonoRegularTtf,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff": SrcFontUbuntu_monoUbuntumonoRegularWoff,
	"../src/font/Ubuntu_Mono/UbuntuMono-Regular.woff2": SrcFontUbuntu_monoUbuntumonoRegularWoff2,
	"../src/font/florence.eot": SrcFontFlorenceEot,
	"../src/font/florence.svg": SrcFontFlorenceSvg,
	"../src/font/florence.ttf": SrcFontFlorenceTtf,
	"../src/font/florence.woff": SrcFontFlorenceWoff,
	"../src/html templates/jquery-ui.min.js": SrcHtmlTemplatesJqueryUiMinJs,
	"../src/html templates/pagedown.css": SrcHtmlTemplatesPagedownCss,
	"../src/html templates/publish-manual.html": SrcHtmlTemplatesPublishManualHtml,
	"../src/html templates/publish-scheduled.html": SrcHtmlTemplatesPublishScheduledHtml,
	"../src/html templates/ui-functions.js": SrcHtmlTemplatesUiFunctionsJs,
	"../src/html templates/workspace-browse.html": SrcHtmlTemplatesWorkspaceBrowseHtml,
	"../src/html templates/workspace-create.html": SrcHtmlTemplatesWorkspaceCreateHtml,
	"../src/html templates/workspace-edit.html": SrcHtmlTemplatesWorkspaceEditHtml,
	"../src/img/favicon11.ico": SrcImgFavicon11Ico,
	"../src/img/favicon12.ico": SrcImgFavicon12Ico,
	"../src/img/favicon21.ico": SrcImgFavicon21Ico,
	"../src/img/favicon22.ico": SrcImgFavicon22Ico,
	"../src/img/favicon23.ico": SrcImgFavicon23Ico,
	"../src/img/favicon24.ico": SrcImgFavicon24Ico,
	"../src/img/flo-logo.png": SrcImgFloLogoPng,
	"../src/img/flo-logo144.png": SrcImgFloLogo144Png,
	"../src/img/rule-21.png": SrcImgRule21Png,
	"../src/img/rule-22.png": SrcImgRule22Png,
	"../src/img/rule.png": SrcImgRulePng,
	"../src/img/sb_v_double_arrow.png": SrcImgSb_v_double_arrowPng,
	"../src/img/semi-transparent-bg.png": SrcImgSemiTransparentBgPng,
	"../src/img/sprite.png": SrcImgSpritePng,
	"../src/img/ui-bg_diagonals-thick_18_b81900_40x40.png": SrcImgUiBg_diagonalsThick_18_b81900_40x40Png,
	"../src/img/ui-bg_diagonals-thick_20_666666_40x40.png": SrcImgUiBg_diagonalsThick_20_666666_40x40Png,
	"../src/img/ui-bg_flat_10_000000_40x100.png": SrcImgUiBg_flat_10_000000_40x100Png,
	"../src/img/ui-bg_glass_100_f6f6f6_1x400.png": SrcImgUiBg_glass_100_f6f6f6_1x400Png,
	"../src/img/ui-bg_glass_100_fdf5ce_1x400.png": SrcImgUiBg_glass_100_fdf5ce_1x400Png,
	"../src/img/ui-bg_glass_65_ffffff_1x400.png": SrcImgUiBg_glass_65_ffffff_1x400Png,
	"../src/img/ui-bg_gloss-wave_35_f6a828_500x100.png": SrcImgUiBg_glossWave_35_f6a828_500x100Png,
	"../src/img/ui-bg_highlight-soft_100_eeeeee_1x100.png": SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png,
	"../src/img/ui-bg_highlight-soft_75_ffe45c_1x100.png": SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png,
	"../src/img/ui-icons_222222_256x240.png": SrcImgUiIcons_222222_256x240Png,
	"../src/img/ui-icons_228ef1_256x240.png": SrcImgUiIcons_228ef1_256x240Png,
	"../src/img/ui-icons_ef8c08_256x240.png": SrcImgUiIcons_ef8c08_256x240Png,
	"../src/img/ui-icons_ffd27a_256x240.png": SrcImgUiIcons_ffd27a_256x240Png,
	"../src/img/ui-icons_ffffff_256x240.png": SrcImgUiIcons_ffffff_256x240Png,
	"../src/img/wmd-buttons.png": SrcImgWmdButtonsPng,
	"../src/index.html": SrcIndexHtml,
	"../src/js/app.js": SrcJsAppJs,
	"../src/js/classes/cookieUtils.js": SrcJsClassesCookieutilsJs,
	"../src/js/classes/florence.js": SrcJsClassesFlorenceJs,
	"../src/js/classes/pathUtils.js": SrcJsClassesPathutilsJs,
	"../src/js/classes/stringUtils.js": SrcJsClassesStringutilsJs,
	"../src/js/components/_accordion.js": SrcJsComponents_accordionJs,
	"../src/js/components/_fileInput.js": SrcJsComponents_fileinputJs,
	"../src/js/components/_hidePanel.js": SrcJsComponents_hidepanelJs,
	"../src/js/components/_showPanel.js": SrcJsComponents_showpanelJs,
	"../src/js/functions/_ContentDeleteMarker.js": SrcJsFunctions_contentdeletemarkerJs,
	"../src/js/functions/__init.js": SrcJsFunctions__initJs,
	"../src/js/functions/_accordionSettings.js": SrcJsFunctions_accordionsettingsJs,
	"../src/js/functions/_autoSize.js": SrcJsFunctions_autosizeJs,
	"../src/js/functions/_checkForPageChanged.js": SrcJsFunctions_checkforpagechangedJs,
	"../src/js/functions/_checkPathParsed.js": SrcJsFunctions_checkpathparsedJs,
	"../src/js/functions/_checkPathSlashes.js": SrcJsFunctions_checkpathslashesJs,
	"../src/js/functions/_checkRenameUri.js": SrcJsFunctions_checkrenameuriJs,
	"../src/js/functions/_collectionHelpers.js": SrcJsFunctions_collectionhelpersJs,
	"../src/js/functions/_copyPath.js": SrcJsFunctions_copypathJs,
	"../src/js/functions/_createCollection.js": SrcJsFunctions_createcollectionJs,
	"../src/js/functions/_createWorkspace.js": SrcJsFunctions_createworkspaceJs,
	"../src/js/functions/_deleteTeam.js": SrcJsFunctions_deleteteamJs,
	"../src/js/functions/_deleteUnpublishedVersion.js": SrcJsFunctions_deleteunpublishedversionJs,
	"../src/js/functions/_deleteUser.js": SrcJsFunctions_deleteuserJs,
	"../src/js/functions/_editAddDataset.js": SrcJsFunctions_editadddatasetJs,
	"../src/js/functions/_editAddFile.js": SrcJsFunctions_editaddfileJs,
	"../src/js/functions/_editAddFileWithDetails.js": SrcJsFunctions_editaddfilewithdetailsJs,
	"../src/js/functions/_editAlert.js": SrcJsFunctions_editalertJs,
	"../src/js/functions/_editBlocks.js": SrcJsFunctions_editblocksJs,
	"../src/js/functions/_editCollection.js": SrcJsFunctions_editcollectionJs,
	"../src/js/functions/_editDatasetVersion.js": SrcJsFunctions_editdatasetversionJs,
	"../src/js/functions/_editDate.js": SrcJsFunctions_editdateJs,
	"../src/js/functions/_editDocWithFilesCorrection.js": SrcJsFunctions_editdocwithfilescorrectionJs,
	"../src/js/functions/_editDocumentCorrection.js": SrcJsFunctions_editdocumentcorrectionJs,
	"../src/js/functions/_editIntLinks.js": SrcJsFunctions_editintlinksJs,
	"../src/js/functions/_editMarkdownOneObject.js": SrcJsFunctions_editmarkdownoneobjectJs,
	"../src/js/functions/_editMarkdownWithNoTitle.js": SrcJsFunctions_editmarkdownwithnotitleJs,
	"../src/js/functions/_editServiceMessage.js": SrcJsFunctions_editservicemessageJs,
	"../src/js/functions/_editTopics.js": SrcJsFunctions_edittopicsJs,
	"../src/js/functions/_environment.js": SrcJsFunctions_environmentJs,
	"../src/js/functions/_externalLinkAccordionSection.js": SrcJsFunctions_externallinkaccordionsectionJs,
	"../src/js/functions/_fileDelete.js": SrcJsFunctions_filedeleteJs,
	"../src/js/functions/_fileUpload.js": SrcJsFunctions_fileuploadJs,
	"../src/js/functions/_getLastPosition.js": SrcJsFunctions_getlastpositionJs,
	"../src/js/functions/_getNetworkStatus.js": SrcJsFunctions_getnetworkstatusJs,
	"../src/js/functions/_getParentPage.js": SrcJsFunctions_getparentpageJs,
	"../src/js/functions/_getPathNameTrimLast.js": SrcJsFunctions_getpathnametrimlastJs,
	"../src/js/functions/_getPreviewUrl.js": SrcJsFunctions_getpreviewurlJs,
	"../src/js/functions/_handleApiError.js": SrcJsFunctions_handleapierrorJs,
	"../src/js/functions/_initialiseNoteMarkdown.js": SrcJsFunctions_initialisenotemarkdownJs,
	"../src/js/functions/_inputValidation.js": SrcJsFunctions_inputvalidationJs,
	"../src/js/functions/_loadBrowseScreen.js": SrcJsFunctions_loadbrowsescreenJs,
	"../src/js/functions/_loadChartBuilder.js": SrcJsFunctions_loadchartbuilderJs,
	"../src/js/functions/_loadChartsList.js": SrcJsFunctions_loadchartslistJs,
	"../src/js/functions/_loadCreateScreen.js": SrcJsFunctions_loadcreatescreenJs,
	"../src/js/functions/_loadCreator.js": SrcJsFunctions_loadcreatorJs,
	"../src/js/functions/_loadCreatorDatepicker.js": SrcJsFunctions_loadcreatordatepickerJs,
	"../src/js/functions/_loadEmbedIframe.js": SrcJsFunctions_loadembediframeJs,
	"../src/js/functions/_loadEquationBuilder.js": SrcJsFunctions_loadequationbuilderJs,
	"../src/js/functions/_loadEquationsList.js": SrcJsFunctions_loadequationslistJs,
	"../src/js/functions/_loadImageBuilder.js": SrcJsFunctions_loadimagebuilderJs,
	"../src/js/functions/_loadImagesList.js": SrcJsFunctions_loadimageslistJs,
	"../src/js/functions/_loadImportScreen.js": SrcJsFunctions_loadimportscreenJs,
	"../src/js/functions/_loadMarkdownEditor.js": SrcJsFunctions_loadmarkdowneditorJs,
	"../src/js/functions/_loadPageDataIntoEditor.js": SrcJsFunctions_loadpagedataintoeditorJs,
	"../src/js/functions/_loadParentLink.js": SrcJsFunctions_loadparentlinkJs,
	"../src/js/functions/_loadT16Creator.js": SrcJsFunctions_loadt16creatorJs,
	"../src/js/functions/_loadT4Creator.js": SrcJsFunctions_loadt4creatorJs,
	"../src/js/functions/_loadT6Creator.js": SrcJsFunctions_loadt6creatorJs,
	"../src/js/functions/_loadT7Creator.js": SrcJsFunctions_loadt7creatorJs,
	"../src/js/functions/_loadT8DatasetCreator.js": SrcJsFunctions_loadt8datasetcreatorJs,
	"../src/js/functions/_loadT8LandingCreator.js": SrcJsFunctions_loadt8landingcreatorJs,
	"../src/js/functions/_loadTableBuilder.js": SrcJsFunctions_loadtablebuilderJs,
	"../src/js/functions/_loadTablesList.js": SrcJsFunctions_loadtableslistJs,
	"../src/js/functions/_loadVisCreator.js": SrcJsFunctions_loadviscreatorJs,
	"../src/js/functions/_logout.js": SrcJsFunctions_logoutJs,
	"../src/js/functions/_makeUrl.js": SrcJsFunctions_makeurlJs,
	"../src/js/functions/_markdownContentAccordionSection.js": SrcJsFunctions_markdowncontentaccordionsectionJs,
	"../src/js/functions/_markdownSetLines.js": SrcJsFunctions_markdownsetlinesJs,
	"../src/js/functions/_menuSelectSettings.js": SrcJsFunctions_menuselectsettingsJs,
	"../src/js/functions/_moveBrowseNode.js": SrcJsFunctions_movebrowsenodeJs,
	"../src/js/functions/_parseUrl.js": SrcJsFunctions_parseurlJs,
	"../src/js/functions/_postApproveCollection.js": SrcJsFunctions_postapprovecollectionJs,
	"../src/js/functions/_postComplete.js": SrcJsFunctions_postcompleteJs,
	"../src/js/functions/_postContent.js": SrcJsFunctions_postcontentJs,
	"../src/js/functions/_postLogin.js": SrcJsFunctions_postloginJs,
	"../src/js/functions/_postReview.js": SrcJsFunctions_postreviewJs,
	"../src/js/functions/_postTeam.js": SrcJsFunctions_postteamJs,
	"../src/js/functions/_postUser.js": SrcJsFunctions_postuserJs,
	"../src/js/functions/_publish.js": SrcJsFunctions_publishJs,
	"../src/js/functions/_refreshPreview.js": SrcJsFunctions_refreshpreviewJs,
	"../src/js/functions/_relatedItemAccordionSection.js": SrcJsFunctions_relateditemaccordionsectionJs,
	"../src/js/functions/_renameChildren.js": SrcJsFunctions_renamechildrenJs,
	"../src/js/functions/_renameContent.js": SrcJsFunctions_renamecontentJs,
	"../src/js/functions/_renderAccordionSections.js": SrcJsFunctions_renderaccordionsectionsJs,
	"../src/js/functions/_reset.js": SrcJsFunctions_resetJs,
	"../src/js/functions/_saveContent.js": SrcJsFunctions_savecontentJs,
	"../src/js/functions/_saveNewCorrection.js": SrcJsFunctions_savenewcorrectionJs,
	"../src/js/functions/_setShortcuts.js": SrcJsFunctions_setshortcutsJs,
	"../src/js/functions/_setupFlorence.js": SrcJsFunctions_setupflorenceJs,
	"../src/js/functions/_t16ReleaseEditor.js": SrcJsFunctions_t16releaseeditorJs,
	"../src/js/functions/_t1Editor.js": SrcJsFunctions_t1editorJs,
	"../src/js/functions/_t1EditorCensus.js": SrcJsFunctions_t1editorcensusJs,
	"../src/js/functions/_t2Editor.js": SrcJsFunctions_t2editorJs,
	"../src/js/functions/_t3Editor.js": SrcJsFunctions_t3editorJs,
	"../src/js/functions/_t4ArticleDownloadEditor.js": SrcJsFunctions_t4articledownloadeditorJs,
	"../src/js/functions/_t4ArticleEditor.js": SrcJsFunctions_t4articleeditorJs,
	"../src/js/functions/_t4BulletinEditor.js": SrcJsFunctions_t4bulletineditorJs,
	"../src/js/functions/_t5TimeseriesEditor.js": SrcJsFunctions_t5timeserieseditorJs,
	"../src/js/functions/_t6CompendiumChapterEditor.js": SrcJsFunctions_t6compendiumchaptereditorJs,
	"../src/js/functions/_t6CompendiumDataEditor.js": SrcJsFunctions_t6compendiumdataeditorJs,
	"../src/js/functions/_t6CompendiumEditor.js": SrcJsFunctions_t6compendiumeditorJs,
	"../src/js/functions/_t7AdHocEditor.js": SrcJsFunctions_t7adhoceditorJs,
	"../src/js/functions/_t7FoiEditor.js": SrcJsFunctions_t7foieditorJs,
	"../src/js/functions/_t7MethodologyDownloadEditor.js": SrcJsFunctions_t7methodologydownloadeditorJs,
	"../src/js/functions/_t7MethodologyEditor.js": SrcJsFunctions_t7methodologyeditorJs,
	"../src/js/functions/_t7QmiEditor.js": SrcJsFunctions_t7qmieditorJs,
	"../src/js/functions/_t7StaticArticleEditor.js": SrcJsFunctions_t7staticarticleeditorJs,
	"../src/js/functions/_t7StaticLandingPageEditor.js": SrcJsFunctions_t7staticlandingpageeditorJs,
	"../src/js/functions/_t7StaticPageEditor.js": SrcJsFunctions_t7staticpageeditorJs,
	"../src/js/functions/_t8DatasetEditor.js": SrcJsFunctions_t8dataseteditorJs,
	"../src/js/functions/_t8LandingPageEditor.js": SrcJsFunctions_t8landingpageeditorJs,
	"../src/js/functions/_transfer.js": SrcJsFunctions_transferJs,
	"../src/js/functions/_treeNodeSelect.js": SrcJsFunctions_treenodeselectJs,
	"../src/js/functions/_ui.js": SrcJsFunctions_uiJs,
	"../src/js/functions/_uiTidyup.js": SrcJsFunctions_uitidyupJs,
	"../src/js/functions/_updateContent.js": SrcJsFunctions_updatecontentJs,
	"../src/js/functions/_viewChangePassword.js": SrcJsFunctions_viewchangepasswordJs,
	"../src/js/functions/_viewCollectionDetails.js": SrcJsFunctions_viewcollectiondetailsJs,
	"../src/js/functions/_viewCollections.js": SrcJsFunctions_viewcollectionsJs,
	"../src/js/functions/_viewController.js": SrcJsFunctions_viewcontrollerJs,
	"../src/js/functions/_viewLogIn.js": SrcJsFunctions_viewloginJs,
	"../src/js/functions/_viewPublish.js": SrcJsFunctions_viewpublishJs,
	"../src/js/functions/_viewPublishDetails.js": SrcJsFunctions_viewpublishdetailsJs,
	"../src/js/functions/_viewReleaseSelector.js": SrcJsFunctions_viewreleaseselectorJs,
	"../src/js/functions/_viewReportDetails.js": SrcJsFunctions_viewreportdetailsJs,
	"../src/js/functions/_viewReports.js": SrcJsFunctions_viewreportsJs,
	"../src/js/functions/_viewTeamDetails.js": SrcJsFunctions_viewteamdetailsJs,
	"../src/js/functions/_viewTeams.js": SrcJsFunctions_viewteamsJs,
	"../src/js/functions/_viewUserDetails.js": SrcJsFunctions_viewuserdetailsJs,
	"../src/js/functions/_viewUsers.js": SrcJsFunctions_viewusersJs,
	"../src/js/functions/_viewWorkspace.js": SrcJsFunctions_viewworkspaceJs,
	"../src/js/functions/_visualisationEditor.js": SrcJsFunctions_visualisationeditorJs,
	"../src/js/functions/registerServiceWorker.js": SrcJsFunctionsRegisterserviceworkerJs,
	"../src/js/third-party/highcharts.js": SrcJsThirdPartyHighchartsJs,
	"../src/js/third-party/redux.min.js": SrcJsThirdPartyReduxMinJs,
	"../src/js/zebedee-api/_deleteCollection.js": SrcJsZebedeeApi_deletecollectionJs,
	"../src/js/zebedee-api/_deleteContent.js": SrcJsZebedeeApi_deletecontentJs,
	"../src/js/zebedee-api/_deleteEquation.js": SrcJsZebedeeApi_deleteequationJs,
	"../src/js/zebedee-api/_getCollection.js": SrcJsZebedeeApi_getcollectionJs,
	"../src/js/zebedee-api/_getPageData.js": SrcJsZebedeeApi_getpagedataJs,
	"../src/js/zebedee-api/_getPageResource.js": SrcJsZebedeeApi_getpageresourceJs,
	"../src/js/zebedee-api/_getTeams.js": SrcJsZebedeeApi_getteamsJs,
	"../src/js/zebedee-api/_getUserPermission.js": SrcJsZebedeeApi_getuserpermissionJs,
	"../src/js/zebedee-api/_getUsers.js": SrcJsZebedeeApi_getusersJs,
	"../src/js/zebedee-api/_moveContent.js": SrcJsZebedeeApi_movecontentJs,
	"../src/js/zebedee-api/_postPassword.js": SrcJsZebedeeApi_postpasswordJs,
	"../src/js/zebedee-api/_postPermission.js": SrcJsZebedeeApi_postpermissionJs,
	"../src/js/zebedee-api/_putContent.js": SrcJsZebedeeApi_putcontentJs,
	"../src/manifest.json": SrcManifestJson,
	"../src/package.json": SrcPackageJson,
	"../src/scss/components/_accordion.scss": SrcScssComponents_accordionScss,
	"../src/scss/components/_builder.scss": SrcScssComponents_builderScss,
	"../src/scss/components/_editor-section.scss": SrcScssComponents_editorSectionScss,
	"../src/scss/components/_icons.scss": SrcScssComponents_iconsScss,
	"../src/scss/components/_markdown-editor.scss": SrcScssComponents_markdownEditorScss,
	"../src/scss/components/_network-status.scss": SrcScssComponents_networkStatusScss,
	"../src/scss/components/_page.scss": SrcScssComponents_pageScss,
	"../src/scss/components/_slider.scss": SrcScssComponents_sliderScss,
	"../src/scss/elements/_buttons.scss": SrcScssElements_buttonsScss,
	"../src/scss/elements/_forms.scss": SrcScssElements_formsScss,
	"../src/scss/elements/_inputs.scss": SrcScssElements_inputsScss,
	"../src/scss/elements/_lists.scss": SrcScssElements_listsScss,
	"../src/scss/elements/_nav.scss": SrcScssElements_navScss,
	"../src/scss/elements/_tables.scss": SrcScssElements_tablesScss,
	"../src/scss/elements/_typography.scss": SrcScssElements_typographyScss,
	"../src/scss/main.scss": SrcScssMainScss,
	"../src/scss/partials/_base.scss": SrcScssPartials_baseScss,
	"../src/scss/partials/_collections.scss": SrcScssPartials_collectionsScss,
	"../src/scss/partials/_colour-palette.scss": SrcScssPartials_colourPaletteScss,
	"../src/scss/partials/_elements.scss": SrcScssPartials_elementsScss,
	"../src/scss/partials/_fonts.scss": SrcScssPartials_fontsScss,
	"../src/scss/partials/_jqui.scss": SrcScssPartials_jquiScss,
	"../src/scss/partials/_publish.scss": SrcScssPartials_publishScss,
	"../src/scss/partials/_reset.scss": SrcScssPartials_resetScss,
	"../src/scss/partials/_shame.scss": SrcScssPartials_shameScss,
	"../src/scss/partials/_utilities.scss": SrcScssPartials_utilitiesScss,
	"../src/scss/partials/_workspace.scss": SrcScssPartials_workspaceScss,
	"../src/scss/utilities/_display.scss": SrcScssUtilities_displayScss,
	"../src/scss/utilities/_grid.scss": SrcScssUtilities_gridScss,
	"../src/scss/utilities/_margin.scss": SrcScssUtilities_marginScss,
	"../src/scss/utilities/_mixins.scss": SrcScssUtilities_mixinsScss,
	"../src/scss/utilities/_padding.scss": SrcScssUtilities_paddingScss,
	"../src/scss/utilities/_panels.scss": SrcScssUtilities_panelsScss,
	"../src/scss/utilities/_utilities.scss": SrcScssUtilities_utilitiesScss,
	"../src/service-worker.js": SrcServiceWorkerJs,
	"../src/spec/classes/FlorenceSpec.js": SrcSpecClassesFlorencespecJs,
	"../src/spec/classes/PathUtilsSpec.js": SrcSpecClassesPathutilsspecJs,
	"../src/spec/classes/StringUtilsSpec.js": SrcSpecClassesStringutilsspecJs,
	"../src/spec/support/jasmine.json": SrcSpecSupportJasmineJson,
	"../src/templates/blockModal.handlebars": SrcTemplatesBlockmodalHandlebars,
	"../src/templates/blockNewsModal.handlebars": SrcTemplatesBlocknewsmodalHandlebars,
	"../src/templates/browseNode.handlebars": SrcTemplatesBrowsenodeHandlebars,
	"../src/templates/browseNodeDataVis.handlebars": SrcTemplatesBrowsenodedatavisHandlebars,
	"../src/templates/changePassword.handlebars": SrcTemplatesChangepasswordHandlebars,
	"../src/templates/chartBuilder.handlebars": SrcTemplatesChartbuilderHandlebars,
	"../src/templates/chartEditBarChartExtras.handlebars": SrcTemplatesCharteditbarchartextrasHandlebars,
	"../src/templates/chartEditBarlineExtras.handlebars": SrcTemplatesCharteditbarlineextrasHandlebars,
	"../src/templates/chartEditDualAxisExtras.handlebars": SrcTemplatesCharteditdualaxisextrasHandlebars,
	"../src/templates/chartEditLineChartExtras.handlebars": SrcTemplatesCharteditlinechartextrasHandlebars,
	"../src/templates/childDeletes.handlebars": SrcTemplatesChilddeletesHandlebars,
	"../src/templates/collectionDetails.handlebars": SrcTemplatesCollectiondetailsHandlebars,
	"../src/templates/collectionEdit.handlebars": SrcTemplatesCollectioneditHandlebars,
	"../src/templates/collectionList.handlebars": SrcTemplatesCollectionlistHandlebars,
	"../src/templates/editNav.handlebars": SrcTemplatesEditnavHandlebars,
	"../src/templates/editNavChild.handlebars": SrcTemplatesEditnavchildHandlebars,
	"../src/templates/editorAlert.handlebars": SrcTemplatesEditoralertHandlebars,
	"../src/templates/editorCompendiumDatasetFiles.handlebars": SrcTemplatesEditorcompendiumdatasetfilesHandlebars,
	"../src/templates/editorContent.handlebars": SrcTemplatesEditorcontentHandlebars,
	"../src/templates/editorContentNoTitle.handlebars": SrcTemplatesEditorcontentnotitleHandlebars,
	"../src/templates/editorContentOne.handlebars": SrcTemplatesEditorcontentoneHandlebars,
	"../src/templates/editorCorrection.handlebars": SrcTemplatesEditorcorrectionHandlebars,
	"../src/templates/editorDate.handlebars": SrcTemplatesEditordateHandlebars,
	"../src/templates/editorDocWithFiles.handlebars": SrcTemplatesEditordocwithfilesHandlebars,
	"../src/templates/editorDownloads.handlebars": SrcTemplatesEditordownloadsHandlebars,
	"../src/templates/editorDownloadsWithSummary.handlebars": SrcTemplatesEditordownloadswithsummaryHandlebars,
	"../src/templates/editorLinks.handlebars": SrcTemplatesEditorlinksHandlebars,
	"../src/templates/editorRelated.handlebars": SrcTemplatesEditorrelatedHandlebars,
	"../src/templates/editorServiceMessage.handlebars": SrcTemplatesEditorservicemessageHandlebars,
	"../src/templates/editorT1Blocks.handlebars": SrcTemplatesEditort1blocksHandlebars,
	"../src/templates/editorTopics.handlebars": SrcTemplatesEditortopicsHandlebars,
	"../src/templates/embedIframe.handlebars": SrcTemplatesEmbediframeHandlebars,
	"../src/templates/equationBuilder.handlebars": SrcTemplatesEquationbuilderHandlebars,
	"../src/templates/florence.handlebars": SrcTemplatesFlorenceHandlebars,
	"../src/templates/iframeNav.handlebars": SrcTemplatesIframenavHandlebars,
	"../src/templates/imageBuilder.handlebars": SrcTemplatesImagebuilderHandlebars,
	"../src/templates/linkExternalModal.handlebars": SrcTemplatesLinkexternalmodalHandlebars,
	"../src/templates/linkModal.handlebars": SrcTemplatesLinkmodalHandlebars,
	"../src/templates/loadingAnimation.handlebars": SrcTemplatesLoadinganimationHandlebars,
	"../src/templates/login.handlebars": SrcTemplatesLoginHandlebars,
	"../src/templates/mainNav.handlebars": SrcTemplatesMainnavHandlebars,
	"../src/templates/markdownEditor.handlebars": SrcTemplatesMarkdowneditorHandlebars,
	"../src/templates/markdownEditorNoTitle.handlebars": SrcTemplatesMarkdowneditornotitleHandlebars,
	"../src/templates/publishDetails.handlebars": SrcTemplatesPublishdetailsHandlebars,
	"../src/templates/publishList.handlebars": SrcTemplatesPublishlistHandlebars,
	"../src/templates/relatedModal.handlebars": SrcTemplatesRelatedmodalHandlebars,
	"../src/templates/releaseSelector.handlebars": SrcTemplatesReleaseselectorHandlebars,
	"../src/templates/reportList.handlebars": SrcTemplatesReportlistHandlebars,
	"../src/templates/reportPublishedDetails.handlebars": SrcTemplatesReportpublisheddetailsHandlebars,
	"../src/templates/reportUnpublishedDetails.handlebars": SrcTemplatesReportunpublisheddetailsHandlebars,
	"../src/templates/selectorHour.handlebars": SrcTemplatesSelectorhourHandlebars,
	"../src/templates/selectorMinute.handlebars": SrcTemplatesSelectorminuteHandlebars,
	"../src/templates/tableBuilder.handlebars": SrcTemplatesTablebuilderHandlebars,
	"../src/templates/teamDetails.handlebars": SrcTemplatesTeamdetailsHandlebars,
	"../src/templates/teamEdit.handlebars": SrcTemplatesTeameditHandlebars,
	"../src/templates/teamList.handlebars": SrcTemplatesTeamlistHandlebars,
	"../src/templates/tickAnimation.handlebars": SrcTemplatesTickanimationHandlebars,
	"../src/templates/uploadFileForm.handlebars": SrcTemplatesUploadfileformHandlebars,
	"../src/templates/userDetails.handlebars": SrcTemplatesUserdetailsHandlebars,
	"../src/templates/userList.handlebars": SrcTemplatesUserlistHandlebars,
	"../src/templates/workBrowse.handlebars": SrcTemplatesWorkbrowseHandlebars,
	"../src/templates/workCreate.handlebars": SrcTemplatesWorkcreateHandlebars,
	"../src/templates/workEditCharts.handlebars": SrcTemplatesWorkeditchartsHandlebars,
	"../src/templates/workEditEquations.handlebars": SrcTemplatesWorkeditequationsHandlebars,
	"../src/templates/workEditImages.handlebars": SrcTemplatesWorkeditimagesHandlebars,
	"../src/templates/workEditT1.handlebars": SrcTemplatesWorkeditt1Handlebars,
	"../src/templates/workEditT16.handlebars": SrcTemplatesWorkeditt16Handlebars,
	"../src/templates/workEditT1Census.handlebars": SrcTemplatesWorkeditt1censusHandlebars,
	"../src/templates/workEditT1Sections.handlebars": SrcTemplatesWorkeditt1sectionsHandlebars,
	"../src/templates/workEditT2.handlebars": SrcTemplatesWorkeditt2Handlebars,
	"../src/templates/workEditT3.handlebars": SrcTemplatesWorkeditt3Handlebars,
	"../src/templates/workEditT4Article.handlebars": SrcTemplatesWorkeditt4articleHandlebars,
	"../src/templates/workEditT4ArticleDownload.handlebars": SrcTemplatesWorkeditt4articledownloadHandlebars,
	"../src/templates/workEditT4Bulletin.handlebars": SrcTemplatesWorkeditt4bulletinHandlebars,
	"../src/templates/workEditT4Compendium.handlebars": SrcTemplatesWorkeditt4compendiumHandlebars,
	"../src/templates/workEditT4Methodology.handlebars": SrcTemplatesWorkeditt4methodologyHandlebars,
	"../src/templates/workEditT5.handlebars": SrcTemplatesWorkeditt5Handlebars,
	"../src/templates/workEditT6.handlebars": SrcTemplatesWorkeditt6Handlebars,
	"../src/templates/workEditT6Chapter.handlebars": SrcTemplatesWorkeditt6chapterHandlebars,
	"../src/templates/workEditT6Dataset.handlebars": SrcTemplatesWorkeditt6datasetHandlebars,
	"../src/templates/workEditT7.handlebars": SrcTemplatesWorkeditt7Handlebars,
	"../src/templates/workEditT7Landing.handlebars": SrcTemplatesWorkeditt7landingHandlebars,
	"../src/templates/workEditT7StaticArticle.handlebars": SrcTemplatesWorkeditt7staticarticleHandlebars,
	"../src/templates/workEditT8.handlebars": SrcTemplatesWorkeditt8Handlebars,
	"../src/templates/workEditT8Compendium.handlebars": SrcTemplatesWorkeditt8compendiumHandlebars,
	"../src/templates/workEditT8CorrectionList.handlebars": SrcTemplatesWorkeditt8correctionlistHandlebars,
	"../src/templates/workEditT8LandingDatasetList.handlebars": SrcTemplatesWorkeditt8landingdatasetlistHandlebars,
	"../src/templates/workEditT8LandingPage.handlebars": SrcTemplatesWorkeditt8landingpageHandlebars,
	"../src/templates/workEditT8VersionList.handlebars": SrcTemplatesWorkeditt8versionlistHandlebars,
	"../src/templates/workEditTables.handlebars": SrcTemplatesWorkedittablesHandlebars,
	"../src/templates/workEditVisualisation.handlebars": SrcTemplatesWorkeditvisualisationHandlebars,
	"../src/templates/workImport.handlebars": SrcTemplatesWorkimportHandlebars,
	"../src/templates/workSpace.handlebars": SrcTemplatesWorkspaceHandlebars,
	"../src/webpack.config-test.js": SrcWebpackConfigTestJs,
	"../src/webpack.config.js": SrcWebpackConfigJs,
	"../src/webpack.html": SrcWebpackHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"src": &bintree{nil, map[string]*bintree{
			".DS_Store": &bintree{SrcDs_store, map[string]*bintree{}},
			"app": &bintree{nil, map[string]*bintree{
				"app.js": &bintree{SrcAppAppJs, map[string]*bintree{}},
				"shared": &bintree{nil, map[string]*bintree{
					"api": &bintree{nil, map[string]*bintree{
						"getActivePage.js": &bintree{SrcAppSharedApiGetactivepageJs, map[string]*bintree{}},
						"getBrowseTree.js": &bintree{SrcAppSharedApiGetbrowsetreeJs, map[string]*bintree{}},
						"saveNewPage.js": &bintree{SrcAppSharedApiSavenewpageJs, map[string]*bintree{}},
						"updatePage.js": &bintree{SrcAppSharedApiUpdatepageJs, map[string]*bintree{}},
					}},
					"models": &bintree{nil, map[string]*bintree{
						"pageModels.js": &bintree{SrcAppSharedModelsPagemodelsJs, map[string]*bintree{}},
					}},
					"state": &bintree{nil, map[string]*bintree{
						"baseUrlState.js": &bintree{SrcAppSharedStateBaseurlstateJs, map[string]*bintree{}},
						"collectionState.js": &bintree{SrcAppSharedStateCollectionstateJs, map[string]*bintree{}},
						"state.js": &bintree{SrcAppSharedStateStateJs, map[string]*bintree{}},
						"userState.js": &bintree{SrcAppSharedStateUserstateJs, map[string]*bintree{}},
						"watchState.js": &bintree{SrcAppSharedStateWatchstateJs, map[string]*bintree{}},
						"workspaceState.js": &bintree{SrcAppSharedStateWorkspacestateJs, map[string]*bintree{}},
					}},
					"templateHelpers": &bintree{nil, map[string]*bintree{
						"ifCond.js": &bintree{SrcAppSharedTemplatehelpersIfcondJs, map[string]*bintree{}},
					}},
					"templatePartials": &bintree{nil, map[string]*bintree{
						"loadingAnimation.handlebars": &bintree{SrcAppSharedTemplatepartialsLoadinganimationHandlebars, map[string]*bintree{}},
					}},
					"utilities": &bintree{nil, map[string]*bintree{
						"bindDatePicker.js": &bintree{SrcAppSharedUtilitiesBinddatepickerJs, map[string]*bintree{}},
						"get.js": &bintree{SrcAppSharedUtilitiesGetJs, map[string]*bintree{}},
						"post.js": &bintree{SrcAppSharedUtilitiesPostJs, map[string]*bintree{}},
						"utilities.js": &bintree{SrcAppSharedUtilitiesUtilitiesJs, map[string]*bintree{}},
						"utilities.test.js": &bintree{SrcAppSharedUtilitiesUtilitiesTestJs, map[string]*bintree{}},
					}},
				}},
				"workspace": &bintree{nil, map[string]*bintree{
					"browse": &bintree{nil, map[string]*bintree{
						"browse.handlebars": &bintree{SrcAppWorkspaceBrowseBrowseHandlebars, map[string]*bintree{}},
						"browseController.js": &bintree{SrcAppWorkspaceBrowseBrowsecontrollerJs, map[string]*bintree{}},
						"browseNode.handlebars": &bintree{SrcAppWorkspaceBrowseBrowsenodeHandlebars, map[string]*bintree{}},
						"browseView.js": &bintree{SrcAppWorkspaceBrowseBrowseviewJs, map[string]*bintree{}},
						"browseVisNode.handlebars": &bintree{SrcAppWorkspaceBrowseBrowsevisnodeHandlebars, map[string]*bintree{}},
					}},
					"create": &bintree{nil, map[string]*bintree{
						"create.handlebars": &bintree{SrcAppWorkspaceCreateCreateHandlebars, map[string]*bintree{}},
						"createController.js": &bintree{SrcAppWorkspaceCreateCreatecontrollerJs, map[string]*bintree{}},
						"createView.js": &bintree{SrcAppWorkspaceCreateCreateviewJs, map[string]*bintree{}},
					}},
					"edit": &bintree{nil, map[string]*bintree{
						"edit.handlebars": &bintree{SrcAppWorkspaceEditEditHandlebars, map[string]*bintree{}},
						"editAccordion.handlebars": &bintree{SrcAppWorkspaceEditEditaccordionHandlebars, map[string]*bintree{}},
						"editController.js": &bintree{SrcAppWorkspaceEditEditcontrollerJs, map[string]*bintree{}},
						"editView.js": &bintree{SrcAppWorkspaceEditEditviewJs, map[string]*bintree{}},
					}},
					"navigation": &bintree{nil, map[string]*bintree{
						"navigation.handlebars": &bintree{SrcAppWorkspaceNavigationNavigationHandlebars, map[string]*bintree{}},
						"navigationController.js": &bintree{SrcAppWorkspaceNavigationNavigationcontrollerJs, map[string]*bintree{}},
						"navigationView.js": &bintree{SrcAppWorkspaceNavigationNavigationviewJs, map[string]*bintree{}},
					}},
					"preview": &bintree{nil, map[string]*bintree{
						"preview.handlebars": &bintree{SrcAppWorkspacePreviewPreviewHandlebars, map[string]*bintree{}},
						"previewController.js": &bintree{SrcAppWorkspacePreviewPreviewcontrollerJs, map[string]*bintree{}},
						"previewView.js": &bintree{SrcAppWorkspacePreviewPreviewviewJs, map[string]*bintree{}},
					}},
					"workspace.handlebars": &bintree{SrcAppWorkspaceWorkspaceHandlebars, map[string]*bintree{}},
					"workspaceController.js": &bintree{SrcAppWorkspaceWorkspacecontrollerJs, map[string]*bintree{}},
					"workspaceView.js": &bintree{SrcAppWorkspaceWorkspaceviewJs, map[string]*bintree{}},
				}},
			}},
			"assets": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"main.min.css": &bintree{SrcAssetsCssMainMinCss, map[string]*bintree{}},
					"main.min.css.map": &bintree{SrcAssetsCssMainMinCssMap, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"bundle.js": &bintree{SrcAssetsJsBundleJs, map[string]*bintree{}},
					"main.js": &bintree{SrcAssetsJsMainJs, map[string]*bintree{}},
					"templates.js": &bintree{SrcAssetsJsTemplatesJs, map[string]*bintree{}},
				}},
				"version.json": &bintree{SrcAssetsVersionJson, map[string]*bintree{}},
			}},
			"css": &bintree{nil, map[string]*bintree{
				"florence.css": &bintree{SrcCssFlorenceCss, map[string]*bintree{}},
				"rapid-prototype-main.css": &bintree{SrcCssRapidPrototypeMainCss, map[string]*bintree{}},
				"third-party": &bintree{nil, map[string]*bintree{
					"c3.css": &bintree{SrcCssThirdPartyC3Css, map[string]*bintree{}},
					"jquery-ui.theme.min.css": &bintree{SrcCssThirdPartyJqueryUiThemeMinCss, map[string]*bintree{}},
					"jquery.tagit.css": &bintree{SrcCssThirdPartyJqueryTagitCss, map[string]*bintree{}},
					"pagedown.css": &bintree{SrcCssThirdPartyPagedownCss, map[string]*bintree{}},
					"responsive-tables.css": &bintree{SrcCssThirdPartyResponsiveTablesCss, map[string]*bintree{}},
					"sweetalert.css": &bintree{SrcCssThirdPartySweetalertCss, map[string]*bintree{}},
					"tagit.ui-zendesk.css": &bintree{SrcCssThirdPartyTagitUiZendeskCss, map[string]*bintree{}},
				}},
			}},
			"font": &bintree{nil, map[string]*bintree{
				"Open_Sans": &bintree{nil, map[string]*bintree{
					"LICENSE.txt": &bintree{SrcFontOpen_sansLicenseTxt, map[string]*bintree{}},
					"OpenSans-Bold.eot": &bintree{SrcFontOpen_sansOpensansBoldEot, map[string]*bintree{}},
					"OpenSans-Bold.svg": &bintree{SrcFontOpen_sansOpensansBoldSvg, map[string]*bintree{}},
					"OpenSans-Bold.ttf": &bintree{SrcFontOpen_sansOpensansBoldTtf, map[string]*bintree{}},
					"OpenSans-Bold.woff": &bintree{SrcFontOpen_sansOpensansBoldWoff, map[string]*bintree{}},
					"OpenSans-Bold.woff2": &bintree{SrcFontOpen_sansOpensansBoldWoff2, map[string]*bintree{}},
					"OpenSans-BoldItalic.eot": &bintree{SrcFontOpen_sansOpensansBolditalicEot, map[string]*bintree{}},
					"OpenSans-BoldItalic.svg": &bintree{SrcFontOpen_sansOpensansBolditalicSvg, map[string]*bintree{}},
					"OpenSans-BoldItalic.ttf": &bintree{SrcFontOpen_sansOpensansBolditalicTtf, map[string]*bintree{}},
					"OpenSans-BoldItalic.woff": &bintree{SrcFontOpen_sansOpensansBolditalicWoff, map[string]*bintree{}},
					"OpenSans-ExtraBold.eot": &bintree{SrcFontOpen_sansOpensansExtraboldEot, map[string]*bintree{}},
					"OpenSans-ExtraBold.svg": &bintree{SrcFontOpen_sansOpensansExtraboldSvg, map[string]*bintree{}},
					"OpenSans-ExtraBold.ttf": &bintree{SrcFontOpen_sansOpensansExtraboldTtf, map[string]*bintree{}},
					"OpenSans-ExtraBold.woff": &bintree{SrcFontOpen_sansOpensansExtraboldWoff, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.eot": &bintree{SrcFontOpen_sansOpensansExtrabolditalicEot, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.svg": &bintree{SrcFontOpen_sansOpensansExtrabolditalicSvg, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.ttf": &bintree{SrcFontOpen_sansOpensansExtrabolditalicTtf, map[string]*bintree{}},
					"OpenSans-ExtraBoldItalic.woff": &bintree{SrcFontOpen_sansOpensansExtrabolditalicWoff, map[string]*bintree{}},
					"OpenSans-Italic.eot": &bintree{SrcFontOpen_sansOpensansItalicEot, map[string]*bintree{}},
					"OpenSans-Italic.svg": &bintree{SrcFontOpen_sansOpensansItalicSvg, map[string]*bintree{}},
					"OpenSans-Italic.ttf": &bintree{SrcFontOpen_sansOpensansItalicTtf, map[string]*bintree{}},
					"OpenSans-Italic.woff": &bintree{SrcFontOpen_sansOpensansItalicWoff, map[string]*bintree{}},
					"OpenSans-Light.eot": &bintree{SrcFontOpen_sansOpensansLightEot, map[string]*bintree{}},
					"OpenSans-Light.svg": &bintree{SrcFontOpen_sansOpensansLightSvg, map[string]*bintree{}},
					"OpenSans-Light.ttf": &bintree{SrcFontOpen_sansOpensansLightTtf, map[string]*bintree{}},
					"OpenSans-Light.woff": &bintree{SrcFontOpen_sansOpensansLightWoff, map[string]*bintree{}},
					"OpenSans-Light.woff2": &bintree{SrcFontOpen_sansOpensansLightWoff2, map[string]*bintree{}},
					"OpenSans-LightItalic.eot": &bintree{SrcFontOpen_sansOpensansLightitalicEot, map[string]*bintree{}},
					"OpenSans-LightItalic.svg": &bintree{SrcFontOpen_sansOpensansLightitalicSvg, map[string]*bintree{}},
					"OpenSans-LightItalic.ttf": &bintree{SrcFontOpen_sansOpensansLightitalicTtf, map[string]*bintree{}},
					"OpenSans-LightItalic.woff": &bintree{SrcFontOpen_sansOpensansLightitalicWoff, map[string]*bintree{}},
					"OpenSans-Regular.eot": &bintree{SrcFontOpen_sansOpensansRegularEot, map[string]*bintree{}},
					"OpenSans-Regular.svg": &bintree{SrcFontOpen_sansOpensansRegularSvg, map[string]*bintree{}},
					"OpenSans-Regular.ttf": &bintree{SrcFontOpen_sansOpensansRegularTtf, map[string]*bintree{}},
					"OpenSans-Regular.woff": &bintree{SrcFontOpen_sansOpensansRegularWoff, map[string]*bintree{}},
					"OpenSans-Regular.woff2": &bintree{SrcFontOpen_sansOpensansRegularWoff2, map[string]*bintree{}},
					"OpenSans-Semibold.eot": &bintree{SrcFontOpen_sansOpensansSemiboldEot, map[string]*bintree{}},
					"OpenSans-Semibold.svg": &bintree{SrcFontOpen_sansOpensansSemiboldSvg, map[string]*bintree{}},
					"OpenSans-Semibold.ttf": &bintree{SrcFontOpen_sansOpensansSemiboldTtf, map[string]*bintree{}},
					"OpenSans-Semibold.woff": &bintree{SrcFontOpen_sansOpensansSemiboldWoff, map[string]*bintree{}},
					"OpenSans-Semibold.woff2": &bintree{SrcFontOpen_sansOpensansSemiboldWoff2, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.eot": &bintree{SrcFontOpen_sansOpensansSemibolditalicEot, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.svg": &bintree{SrcFontOpen_sansOpensansSemibolditalicSvg, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.ttf": &bintree{SrcFontOpen_sansOpensansSemibolditalicTtf, map[string]*bintree{}},
					"OpenSans-SemiboldItalic.woff": &bintree{SrcFontOpen_sansOpensansSemibolditalicWoff, map[string]*bintree{}},
				}},
				"Roboto_Slab": &bintree{nil, map[string]*bintree{
					"LICENSE.txt": &bintree{SrcFontRoboto_slabLicenseTxt, map[string]*bintree{}},
					"RobotoSlab-Bold.eot": &bintree{SrcFontRoboto_slabRobotoslabBoldEot, map[string]*bintree{}},
					"RobotoSlab-Bold.svg": &bintree{SrcFontRoboto_slabRobotoslabBoldSvg, map[string]*bintree{}},
					"RobotoSlab-Bold.ttf": &bintree{SrcFontRoboto_slabRobotoslabBoldTtf, map[string]*bintree{}},
					"RobotoSlab-Bold.woff": &bintree{SrcFontRoboto_slabRobotoslabBoldWoff, map[string]*bintree{}},
					"RobotoSlab-Bold.woff2": &bintree{SrcFontRoboto_slabRobotoslabBoldWoff2, map[string]*bintree{}},
					"RobotoSlab-Light.eot": &bintree{SrcFontRoboto_slabRobotoslabLightEot, map[string]*bintree{}},
					"RobotoSlab-Light.svg": &bintree{SrcFontRoboto_slabRobotoslabLightSvg, map[string]*bintree{}},
					"RobotoSlab-Light.ttf": &bintree{SrcFontRoboto_slabRobotoslabLightTtf, map[string]*bintree{}},
					"RobotoSlab-Light.woff": &bintree{SrcFontRoboto_slabRobotoslabLightWoff, map[string]*bintree{}},
					"RobotoSlab-Regular.eot": &bintree{SrcFontRoboto_slabRobotoslabRegularEot, map[string]*bintree{}},
					"RobotoSlab-Regular.svg": &bintree{SrcFontRoboto_slabRobotoslabRegularSvg, map[string]*bintree{}},
					"RobotoSlab-Regular.ttf": &bintree{SrcFontRoboto_slabRobotoslabRegularTtf, map[string]*bintree{}},
					"RobotoSlab-Regular.woff": &bintree{SrcFontRoboto_slabRobotoslabRegularWoff, map[string]*bintree{}},
					"RobotoSlab-Regular.woff2": &bintree{SrcFontRoboto_slabRobotoslabRegularWoff2, map[string]*bintree{}},
					"RobotoSlab-Thin.eot": &bintree{SrcFontRoboto_slabRobotoslabThinEot, map[string]*bintree{}},
					"RobotoSlab-Thin.svg": &bintree{SrcFontRoboto_slabRobotoslabThinSvg, map[string]*bintree{}},
					"RobotoSlab-Thin.ttf": &bintree{SrcFontRoboto_slabRobotoslabThinTtf, map[string]*bintree{}},
					"RobotoSlab-Thin.woff": &bintree{SrcFontRoboto_slabRobotoslabThinWoff, map[string]*bintree{}},
					"RobotoSlab-Thin.woff2": &bintree{SrcFontRoboto_slabRobotoslabThinWoff2, map[string]*bintree{}},
				}},
				"Ubuntu_Mono": &bintree{nil, map[string]*bintree{
					"UFL.txt": &bintree{SrcFontUbuntu_monoUflTxt, map[string]*bintree{}},
					"UbuntuMono-Bold.eot": &bintree{SrcFontUbuntu_monoUbuntumonoBoldEot, map[string]*bintree{}},
					"UbuntuMono-Bold.svg": &bintree{SrcFontUbuntu_monoUbuntumonoBoldSvg, map[string]*bintree{}},
					"UbuntuMono-Bold.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoBoldTtf, map[string]*bintree{}},
					"UbuntuMono-Bold.woff": &bintree{SrcFontUbuntu_monoUbuntumonoBoldWoff, map[string]*bintree{}},
					"UbuntuMono-Bold.woff2": &bintree{SrcFontUbuntu_monoUbuntumonoBoldWoff2, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.eot": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicEot, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.svg": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicSvg, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicTtf, map[string]*bintree{}},
					"UbuntuMono-BoldItalic.woff": &bintree{SrcFontUbuntu_monoUbuntumonoBolditalicWoff, map[string]*bintree{}},
					"UbuntuMono-Italic.eot": &bintree{SrcFontUbuntu_monoUbuntumonoItalicEot, map[string]*bintree{}},
					"UbuntuMono-Italic.svg": &bintree{SrcFontUbuntu_monoUbuntumonoItalicSvg, map[string]*bintree{}},
					"UbuntuMono-Italic.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoItalicTtf, map[string]*bintree{}},
					"UbuntuMono-Italic.woff": &bintree{SrcFontUbuntu_monoUbuntumonoItalicWoff, map[string]*bintree{}},
					"UbuntuMono-Regular.eot": &bintree{SrcFontUbuntu_monoUbuntumonoRegularEot, map[string]*bintree{}},
					"UbuntuMono-Regular.svg": &bintree{SrcFontUbuntu_monoUbuntumonoRegularSvg, map[string]*bintree{}},
					"UbuntuMono-Regular.ttf": &bintree{SrcFontUbuntu_monoUbuntumonoRegularTtf, map[string]*bintree{}},
					"UbuntuMono-Regular.woff": &bintree{SrcFontUbuntu_monoUbuntumonoRegularWoff, map[string]*bintree{}},
					"UbuntuMono-Regular.woff2": &bintree{SrcFontUbuntu_monoUbuntumonoRegularWoff2, map[string]*bintree{}},
				}},
				"florence.eot": &bintree{SrcFontFlorenceEot, map[string]*bintree{}},
				"florence.svg": &bintree{SrcFontFlorenceSvg, map[string]*bintree{}},
				"florence.ttf": &bintree{SrcFontFlorenceTtf, map[string]*bintree{}},
				"florence.woff": &bintree{SrcFontFlorenceWoff, map[string]*bintree{}},
			}},
			"html templates": &bintree{nil, map[string]*bintree{
				"jquery-ui.min.js": &bintree{SrcHtmlTemplatesJqueryUiMinJs, map[string]*bintree{}},
				"pagedown.css": &bintree{SrcHtmlTemplatesPagedownCss, map[string]*bintree{}},
				"publish-manual.html": &bintree{SrcHtmlTemplatesPublishManualHtml, map[string]*bintree{}},
				"publish-scheduled.html": &bintree{SrcHtmlTemplatesPublishScheduledHtml, map[string]*bintree{}},
				"ui-functions.js": &bintree{SrcHtmlTemplatesUiFunctionsJs, map[string]*bintree{}},
				"workspace-browse.html": &bintree{SrcHtmlTemplatesWorkspaceBrowseHtml, map[string]*bintree{}},
				"workspace-create.html": &bintree{SrcHtmlTemplatesWorkspaceCreateHtml, map[string]*bintree{}},
				"workspace-edit.html": &bintree{SrcHtmlTemplatesWorkspaceEditHtml, map[string]*bintree{}},
			}},
			"img": &bintree{nil, map[string]*bintree{
				"favicon11.ico": &bintree{SrcImgFavicon11Ico, map[string]*bintree{}},
				"favicon12.ico": &bintree{SrcImgFavicon12Ico, map[string]*bintree{}},
				"favicon21.ico": &bintree{SrcImgFavicon21Ico, map[string]*bintree{}},
				"favicon22.ico": &bintree{SrcImgFavicon22Ico, map[string]*bintree{}},
				"favicon23.ico": &bintree{SrcImgFavicon23Ico, map[string]*bintree{}},
				"favicon24.ico": &bintree{SrcImgFavicon24Ico, map[string]*bintree{}},
				"flo-logo.png": &bintree{SrcImgFloLogoPng, map[string]*bintree{}},
				"flo-logo144.png": &bintree{SrcImgFloLogo144Png, map[string]*bintree{}},
				"rule-21.png": &bintree{SrcImgRule21Png, map[string]*bintree{}},
				"rule-22.png": &bintree{SrcImgRule22Png, map[string]*bintree{}},
				"rule.png": &bintree{SrcImgRulePng, map[string]*bintree{}},
				"sb_v_double_arrow.png": &bintree{SrcImgSb_v_double_arrowPng, map[string]*bintree{}},
				"semi-transparent-bg.png": &bintree{SrcImgSemiTransparentBgPng, map[string]*bintree{}},
				"sprite.png": &bintree{SrcImgSpritePng, map[string]*bintree{}},
				"ui-bg_diagonals-thick_18_b81900_40x40.png": &bintree{SrcImgUiBg_diagonalsThick_18_b81900_40x40Png, map[string]*bintree{}},
				"ui-bg_diagonals-thick_20_666666_40x40.png": &bintree{SrcImgUiBg_diagonalsThick_20_666666_40x40Png, map[string]*bintree{}},
				"ui-bg_flat_10_000000_40x100.png": &bintree{SrcImgUiBg_flat_10_000000_40x100Png, map[string]*bintree{}},
				"ui-bg_glass_100_f6f6f6_1x400.png": &bintree{SrcImgUiBg_glass_100_f6f6f6_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_100_fdf5ce_1x400.png": &bintree{SrcImgUiBg_glass_100_fdf5ce_1x400Png, map[string]*bintree{}},
				"ui-bg_glass_65_ffffff_1x400.png": &bintree{SrcImgUiBg_glass_65_ffffff_1x400Png, map[string]*bintree{}},
				"ui-bg_gloss-wave_35_f6a828_500x100.png": &bintree{SrcImgUiBg_glossWave_35_f6a828_500x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_100_eeeeee_1x100.png": &bintree{SrcImgUiBg_highlightSoft_100_eeeeee_1x100Png, map[string]*bintree{}},
				"ui-bg_highlight-soft_75_ffe45c_1x100.png": &bintree{SrcImgUiBg_highlightSoft_75_ffe45c_1x100Png, map[string]*bintree{}},
				"ui-icons_222222_256x240.png": &bintree{SrcImgUiIcons_222222_256x240Png, map[string]*bintree{}},
				"ui-icons_228ef1_256x240.png": &bintree{SrcImgUiIcons_228ef1_256x240Png, map[string]*bintree{}},
				"ui-icons_ef8c08_256x240.png": &bintree{SrcImgUiIcons_ef8c08_256x240Png, map[string]*bintree{}},
				"ui-icons_ffd27a_256x240.png": &bintree{SrcImgUiIcons_ffd27a_256x240Png, map[string]*bintree{}},
				"ui-icons_ffffff_256x240.png": &bintree{SrcImgUiIcons_ffffff_256x240Png, map[string]*bintree{}},
				"wmd-buttons.png": &bintree{SrcImgWmdButtonsPng, map[string]*bintree{}},
			}},
			"index.html": &bintree{SrcIndexHtml, map[string]*bintree{}},
			"js": &bintree{nil, map[string]*bintree{
				"app.js": &bintree{SrcJsAppJs, map[string]*bintree{}},
				"classes": &bintree{nil, map[string]*bintree{
					"cookieUtils.js": &bintree{SrcJsClassesCookieutilsJs, map[string]*bintree{}},
					"florence.js": &bintree{SrcJsClassesFlorenceJs, map[string]*bintree{}},
					"pathUtils.js": &bintree{SrcJsClassesPathutilsJs, map[string]*bintree{}},
					"stringUtils.js": &bintree{SrcJsClassesStringutilsJs, map[string]*bintree{}},
				}},
				"components": &bintree{nil, map[string]*bintree{
					"_accordion.js": &bintree{SrcJsComponents_accordionJs, map[string]*bintree{}},
					"_fileInput.js": &bintree{SrcJsComponents_fileinputJs, map[string]*bintree{}},
					"_hidePanel.js": &bintree{SrcJsComponents_hidepanelJs, map[string]*bintree{}},
					"_showPanel.js": &bintree{SrcJsComponents_showpanelJs, map[string]*bintree{}},
				}},
				"functions": &bintree{nil, map[string]*bintree{
					"_ContentDeleteMarker.js": &bintree{SrcJsFunctions_contentdeletemarkerJs, map[string]*bintree{}},
					"__init.js": &bintree{SrcJsFunctions__initJs, map[string]*bintree{}},
					"_accordionSettings.js": &bintree{SrcJsFunctions_accordionsettingsJs, map[string]*bintree{}},
					"_autoSize.js": &bintree{SrcJsFunctions_autosizeJs, map[string]*bintree{}},
					"_checkForPageChanged.js": &bintree{SrcJsFunctions_checkforpagechangedJs, map[string]*bintree{}},
					"_checkPathParsed.js": &bintree{SrcJsFunctions_checkpathparsedJs, map[string]*bintree{}},
					"_checkPathSlashes.js": &bintree{SrcJsFunctions_checkpathslashesJs, map[string]*bintree{}},
					"_checkRenameUri.js": &bintree{SrcJsFunctions_checkrenameuriJs, map[string]*bintree{}},
					"_collectionHelpers.js": &bintree{SrcJsFunctions_collectionhelpersJs, map[string]*bintree{}},
					"_copyPath.js": &bintree{SrcJsFunctions_copypathJs, map[string]*bintree{}},
					"_createCollection.js": &bintree{SrcJsFunctions_createcollectionJs, map[string]*bintree{}},
					"_createWorkspace.js": &bintree{SrcJsFunctions_createworkspaceJs, map[string]*bintree{}},
					"_deleteTeam.js": &bintree{SrcJsFunctions_deleteteamJs, map[string]*bintree{}},
					"_deleteUnpublishedVersion.js": &bintree{SrcJsFunctions_deleteunpublishedversionJs, map[string]*bintree{}},
					"_deleteUser.js": &bintree{SrcJsFunctions_deleteuserJs, map[string]*bintree{}},
					"_editAddDataset.js": &bintree{SrcJsFunctions_editadddatasetJs, map[string]*bintree{}},
					"_editAddFile.js": &bintree{SrcJsFunctions_editaddfileJs, map[string]*bintree{}},
					"_editAddFileWithDetails.js": &bintree{SrcJsFunctions_editaddfilewithdetailsJs, map[string]*bintree{}},
					"_editAlert.js": &bintree{SrcJsFunctions_editalertJs, map[string]*bintree{}},
					"_editBlocks.js": &bintree{SrcJsFunctions_editblocksJs, map[string]*bintree{}},
					"_editCollection.js": &bintree{SrcJsFunctions_editcollectionJs, map[string]*bintree{}},
					"_editDatasetVersion.js": &bintree{SrcJsFunctions_editdatasetversionJs, map[string]*bintree{}},
					"_editDate.js": &bintree{SrcJsFunctions_editdateJs, map[string]*bintree{}},
					"_editDocWithFilesCorrection.js": &bintree{SrcJsFunctions_editdocwithfilescorrectionJs, map[string]*bintree{}},
					"_editDocumentCorrection.js": &bintree{SrcJsFunctions_editdocumentcorrectionJs, map[string]*bintree{}},
					"_editIntLinks.js": &bintree{SrcJsFunctions_editintlinksJs, map[string]*bintree{}},
					"_editMarkdownOneObject.js": &bintree{SrcJsFunctions_editmarkdownoneobjectJs, map[string]*bintree{}},
					"_editMarkdownWithNoTitle.js": &bintree{SrcJsFunctions_editmarkdownwithnotitleJs, map[string]*bintree{}},
					"_editServiceMessage.js": &bintree{SrcJsFunctions_editservicemessageJs, map[string]*bintree{}},
					"_editTopics.js": &bintree{SrcJsFunctions_edittopicsJs, map[string]*bintree{}},
					"_environment.js": &bintree{SrcJsFunctions_environmentJs, map[string]*bintree{}},
					"_externalLinkAccordionSection.js": &bintree{SrcJsFunctions_externallinkaccordionsectionJs, map[string]*bintree{}},
					"_fileDelete.js": &bintree{SrcJsFunctions_filedeleteJs, map[string]*bintree{}},
					"_fileUpload.js": &bintree{SrcJsFunctions_fileuploadJs, map[string]*bintree{}},
					"_getLastPosition.js": &bintree{SrcJsFunctions_getlastpositionJs, map[string]*bintree{}},
					"_getNetworkStatus.js": &bintree{SrcJsFunctions_getnetworkstatusJs, map[string]*bintree{}},
					"_getParentPage.js": &bintree{SrcJsFunctions_getparentpageJs, map[string]*bintree{}},
					"_getPathNameTrimLast.js": &bintree{SrcJsFunctions_getpathnametrimlastJs, map[string]*bintree{}},
					"_getPreviewUrl.js": &bintree{SrcJsFunctions_getpreviewurlJs, map[string]*bintree{}},
					"_handleApiError.js": &bintree{SrcJsFunctions_handleapierrorJs, map[string]*bintree{}},
					"_initialiseNoteMarkdown.js": &bintree{SrcJsFunctions_initialisenotemarkdownJs, map[string]*bintree{}},
					"_inputValidation.js": &bintree{SrcJsFunctions_inputvalidationJs, map[string]*bintree{}},
					"_loadBrowseScreen.js": &bintree{SrcJsFunctions_loadbrowsescreenJs, map[string]*bintree{}},
					"_loadChartBuilder.js": &bintree{SrcJsFunctions_loadchartbuilderJs, map[string]*bintree{}},
					"_loadChartsList.js": &bintree{SrcJsFunctions_loadchartslistJs, map[string]*bintree{}},
					"_loadCreateScreen.js": &bintree{SrcJsFunctions_loadcreatescreenJs, map[string]*bintree{}},
					"_loadCreator.js": &bintree{SrcJsFunctions_loadcreatorJs, map[string]*bintree{}},
					"_loadCreatorDatepicker.js": &bintree{SrcJsFunctions_loadcreatordatepickerJs, map[string]*bintree{}},
					"_loadEmbedIframe.js": &bintree{SrcJsFunctions_loadembediframeJs, map[string]*bintree{}},
					"_loadEquationBuilder.js": &bintree{SrcJsFunctions_loadequationbuilderJs, map[string]*bintree{}},
					"_loadEquationsList.js": &bintree{SrcJsFunctions_loadequationslistJs, map[string]*bintree{}},
					"_loadImageBuilder.js": &bintree{SrcJsFunctions_loadimagebuilderJs, map[string]*bintree{}},
					"_loadImagesList.js": &bintree{SrcJsFunctions_loadimageslistJs, map[string]*bintree{}},
					"_loadImportScreen.js": &bintree{SrcJsFunctions_loadimportscreenJs, map[string]*bintree{}},
					"_loadMarkdownEditor.js": &bintree{SrcJsFunctions_loadmarkdowneditorJs, map[string]*bintree{}},
					"_loadPageDataIntoEditor.js": &bintree{SrcJsFunctions_loadpagedataintoeditorJs, map[string]*bintree{}},
					"_loadParentLink.js": &bintree{SrcJsFunctions_loadparentlinkJs, map[string]*bintree{}},
					"_loadT16Creator.js": &bintree{SrcJsFunctions_loadt16creatorJs, map[string]*bintree{}},
					"_loadT4Creator.js": &bintree{SrcJsFunctions_loadt4creatorJs, map[string]*bintree{}},
					"_loadT6Creator.js": &bintree{SrcJsFunctions_loadt6creatorJs, map[string]*bintree{}},
					"_loadT7Creator.js": &bintree{SrcJsFunctions_loadt7creatorJs, map[string]*bintree{}},
					"_loadT8DatasetCreator.js": &bintree{SrcJsFunctions_loadt8datasetcreatorJs, map[string]*bintree{}},
					"_loadT8LandingCreator.js": &bintree{SrcJsFunctions_loadt8landingcreatorJs, map[string]*bintree{}},
					"_loadTableBuilder.js": &bintree{SrcJsFunctions_loadtablebuilderJs, map[string]*bintree{}},
					"_loadTablesList.js": &bintree{SrcJsFunctions_loadtableslistJs, map[string]*bintree{}},
					"_loadVisCreator.js": &bintree{SrcJsFunctions_loadviscreatorJs, map[string]*bintree{}},
					"_logout.js": &bintree{SrcJsFunctions_logoutJs, map[string]*bintree{}},
					"_makeUrl.js": &bintree{SrcJsFunctions_makeurlJs, map[string]*bintree{}},
					"_markdownContentAccordionSection.js": &bintree{SrcJsFunctions_markdowncontentaccordionsectionJs, map[string]*bintree{}},
					"_markdownSetLines.js": &bintree{SrcJsFunctions_markdownsetlinesJs, map[string]*bintree{}},
					"_menuSelectSettings.js": &bintree{SrcJsFunctions_menuselectsettingsJs, map[string]*bintree{}},
					"_moveBrowseNode.js": &bintree{SrcJsFunctions_movebrowsenodeJs, map[string]*bintree{}},
					"_parseUrl.js": &bintree{SrcJsFunctions_parseurlJs, map[string]*bintree{}},
					"_postApproveCollection.js": &bintree{SrcJsFunctions_postapprovecollectionJs, map[string]*bintree{}},
					"_postComplete.js": &bintree{SrcJsFunctions_postcompleteJs, map[string]*bintree{}},
					"_postContent.js": &bintree{SrcJsFunctions_postcontentJs, map[string]*bintree{}},
					"_postLogin.js": &bintree{SrcJsFunctions_postloginJs, map[string]*bintree{}},
					"_postReview.js": &bintree{SrcJsFunctions_postreviewJs, map[string]*bintree{}},
					"_postTeam.js": &bintree{SrcJsFunctions_postteamJs, map[string]*bintree{}},
					"_postUser.js": &bintree{SrcJsFunctions_postuserJs, map[string]*bintree{}},
					"_publish.js": &bintree{SrcJsFunctions_publishJs, map[string]*bintree{}},
					"_refreshPreview.js": &bintree{SrcJsFunctions_refreshpreviewJs, map[string]*bintree{}},
					"_relatedItemAccordionSection.js": &bintree{SrcJsFunctions_relateditemaccordionsectionJs, map[string]*bintree{}},
					"_renameChildren.js": &bintree{SrcJsFunctions_renamechildrenJs, map[string]*bintree{}},
					"_renameContent.js": &bintree{SrcJsFunctions_renamecontentJs, map[string]*bintree{}},
					"_renderAccordionSections.js": &bintree{SrcJsFunctions_renderaccordionsectionsJs, map[string]*bintree{}},
					"_reset.js": &bintree{SrcJsFunctions_resetJs, map[string]*bintree{}},
					"_saveContent.js": &bintree{SrcJsFunctions_savecontentJs, map[string]*bintree{}},
					"_saveNewCorrection.js": &bintree{SrcJsFunctions_savenewcorrectionJs, map[string]*bintree{}},
					"_setShortcuts.js": &bintree{SrcJsFunctions_setshortcutsJs, map[string]*bintree{}},
					"_setupFlorence.js": &bintree{SrcJsFunctions_setupflorenceJs, map[string]*bintree{}},
					"_t16ReleaseEditor.js": &bintree{SrcJsFunctions_t16releaseeditorJs, map[string]*bintree{}},
					"_t1Editor.js": &bintree{SrcJsFunctions_t1editorJs, map[string]*bintree{}},
					"_t1EditorCensus.js": &bintree{SrcJsFunctions_t1editorcensusJs, map[string]*bintree{}},
					"_t2Editor.js": &bintree{SrcJsFunctions_t2editorJs, map[string]*bintree{}},
					"_t3Editor.js": &bintree{SrcJsFunctions_t3editorJs, map[string]*bintree{}},
					"_t4ArticleDownloadEditor.js": &bintree{SrcJsFunctions_t4articledownloadeditorJs, map[string]*bintree{}},
					"_t4ArticleEditor.js": &bintree{SrcJsFunctions_t4articleeditorJs, map[string]*bintree{}},
					"_t4BulletinEditor.js": &bintree{SrcJsFunctions_t4bulletineditorJs, map[string]*bintree{}},
					"_t5TimeseriesEditor.js": &bintree{SrcJsFunctions_t5timeserieseditorJs, map[string]*bintree{}},
					"_t6CompendiumChapterEditor.js": &bintree{SrcJsFunctions_t6compendiumchaptereditorJs, map[string]*bintree{}},
					"_t6CompendiumDataEditor.js": &bintree{SrcJsFunctions_t6compendiumdataeditorJs, map[string]*bintree{}},
					"_t6CompendiumEditor.js": &bintree{SrcJsFunctions_t6compendiumeditorJs, map[string]*bintree{}},
					"_t7AdHocEditor.js": &bintree{SrcJsFunctions_t7adhoceditorJs, map[string]*bintree{}},
					"_t7FoiEditor.js": &bintree{SrcJsFunctions_t7foieditorJs, map[string]*bintree{}},
					"_t7MethodologyDownloadEditor.js": &bintree{SrcJsFunctions_t7methodologydownloadeditorJs, map[string]*bintree{}},
					"_t7MethodologyEditor.js": &bintree{SrcJsFunctions_t7methodologyeditorJs, map[string]*bintree{}},
					"_t7QmiEditor.js": &bintree{SrcJsFunctions_t7qmieditorJs, map[string]*bintree{}},
					"_t7StaticArticleEditor.js": &bintree{SrcJsFunctions_t7staticarticleeditorJs, map[string]*bintree{}},
					"_t7StaticLandingPageEditor.js": &bintree{SrcJsFunctions_t7staticlandingpageeditorJs, map[string]*bintree{}},
					"_t7StaticPageEditor.js": &bintree{SrcJsFunctions_t7staticpageeditorJs, map[string]*bintree{}},
					"_t8DatasetEditor.js": &bintree{SrcJsFunctions_t8dataseteditorJs, map[string]*bintree{}},
					"_t8LandingPageEditor.js": &bintree{SrcJsFunctions_t8landingpageeditorJs, map[string]*bintree{}},
					"_transfer.js": &bintree{SrcJsFunctions_transferJs, map[string]*bintree{}},
					"_treeNodeSelect.js": &bintree{SrcJsFunctions_treenodeselectJs, map[string]*bintree{}},
					"_ui.js": &bintree{SrcJsFunctions_uiJs, map[string]*bintree{}},
					"_uiTidyup.js": &bintree{SrcJsFunctions_uitidyupJs, map[string]*bintree{}},
					"_updateContent.js": &bintree{SrcJsFunctions_updatecontentJs, map[string]*bintree{}},
					"_viewChangePassword.js": &bintree{SrcJsFunctions_viewchangepasswordJs, map[string]*bintree{}},
					"_viewCollectionDetails.js": &bintree{SrcJsFunctions_viewcollectiondetailsJs, map[string]*bintree{}},
					"_viewCollections.js": &bintree{SrcJsFunctions_viewcollectionsJs, map[string]*bintree{}},
					"_viewController.js": &bintree{SrcJsFunctions_viewcontrollerJs, map[string]*bintree{}},
					"_viewLogIn.js": &bintree{SrcJsFunctions_viewloginJs, map[string]*bintree{}},
					"_viewPublish.js": &bintree{SrcJsFunctions_viewpublishJs, map[string]*bintree{}},
					"_viewPublishDetails.js": &bintree{SrcJsFunctions_viewpublishdetailsJs, map[string]*bintree{}},
					"_viewReleaseSelector.js": &bintree{SrcJsFunctions_viewreleaseselectorJs, map[string]*bintree{}},
					"_viewReportDetails.js": &bintree{SrcJsFunctions_viewreportdetailsJs, map[string]*bintree{}},
					"_viewReports.js": &bintree{SrcJsFunctions_viewreportsJs, map[string]*bintree{}},
					"_viewTeamDetails.js": &bintree{SrcJsFunctions_viewteamdetailsJs, map[string]*bintree{}},
					"_viewTeams.js": &bintree{SrcJsFunctions_viewteamsJs, map[string]*bintree{}},
					"_viewUserDetails.js": &bintree{SrcJsFunctions_viewuserdetailsJs, map[string]*bintree{}},
					"_viewUsers.js": &bintree{SrcJsFunctions_viewusersJs, map[string]*bintree{}},
					"_viewWorkspace.js": &bintree{SrcJsFunctions_viewworkspaceJs, map[string]*bintree{}},
					"_visualisationEditor.js": &bintree{SrcJsFunctions_visualisationeditorJs, map[string]*bintree{}},
					"registerServiceWorker.js": &bintree{SrcJsFunctionsRegisterserviceworkerJs, map[string]*bintree{}},
				}},
				"third-party": &bintree{nil, map[string]*bintree{
					"highcharts.js": &bintree{SrcJsThirdPartyHighchartsJs, map[string]*bintree{}},
					"redux.min.js": &bintree{SrcJsThirdPartyReduxMinJs, map[string]*bintree{}},
				}},
				"zebedee-api": &bintree{nil, map[string]*bintree{
					"_deleteCollection.js": &bintree{SrcJsZebedeeApi_deletecollectionJs, map[string]*bintree{}},
					"_deleteContent.js": &bintree{SrcJsZebedeeApi_deletecontentJs, map[string]*bintree{}},
					"_deleteEquation.js": &bintree{SrcJsZebedeeApi_deleteequationJs, map[string]*bintree{}},
					"_getCollection.js": &bintree{SrcJsZebedeeApi_getcollectionJs, map[string]*bintree{}},
					"_getPageData.js": &bintree{SrcJsZebedeeApi_getpagedataJs, map[string]*bintree{}},
					"_getPageResource.js": &bintree{SrcJsZebedeeApi_getpageresourceJs, map[string]*bintree{}},
					"_getTeams.js": &bintree{SrcJsZebedeeApi_getteamsJs, map[string]*bintree{}},
					"_getUserPermission.js": &bintree{SrcJsZebedeeApi_getuserpermissionJs, map[string]*bintree{}},
					"_getUsers.js": &bintree{SrcJsZebedeeApi_getusersJs, map[string]*bintree{}},
					"_moveContent.js": &bintree{SrcJsZebedeeApi_movecontentJs, map[string]*bintree{}},
					"_postPassword.js": &bintree{SrcJsZebedeeApi_postpasswordJs, map[string]*bintree{}},
					"_postPermission.js": &bintree{SrcJsZebedeeApi_postpermissionJs, map[string]*bintree{}},
					"_putContent.js": &bintree{SrcJsZebedeeApi_putcontentJs, map[string]*bintree{}},
				}},
			}},
			"manifest.json": &bintree{SrcManifestJson, map[string]*bintree{}},
			"package.json": &bintree{SrcPackageJson, map[string]*bintree{}},
			"scss": &bintree{nil, map[string]*bintree{
				"components": &bintree{nil, map[string]*bintree{
					"_accordion.scss": &bintree{SrcScssComponents_accordionScss, map[string]*bintree{}},
					"_builder.scss": &bintree{SrcScssComponents_builderScss, map[string]*bintree{}},
					"_editor-section.scss": &bintree{SrcScssComponents_editorSectionScss, map[string]*bintree{}},
					"_icons.scss": &bintree{SrcScssComponents_iconsScss, map[string]*bintree{}},
					"_markdown-editor.scss": &bintree{SrcScssComponents_markdownEditorScss, map[string]*bintree{}},
					"_network-status.scss": &bintree{SrcScssComponents_networkStatusScss, map[string]*bintree{}},
					"_page.scss": &bintree{SrcScssComponents_pageScss, map[string]*bintree{}},
					"_slider.scss": &bintree{SrcScssComponents_sliderScss, map[string]*bintree{}},
				}},
				"elements": &bintree{nil, map[string]*bintree{
					"_buttons.scss": &bintree{SrcScssElements_buttonsScss, map[string]*bintree{}},
					"_forms.scss": &bintree{SrcScssElements_formsScss, map[string]*bintree{}},
					"_inputs.scss": &bintree{SrcScssElements_inputsScss, map[string]*bintree{}},
					"_lists.scss": &bintree{SrcScssElements_listsScss, map[string]*bintree{}},
					"_nav.scss": &bintree{SrcScssElements_navScss, map[string]*bintree{}},
					"_tables.scss": &bintree{SrcScssElements_tablesScss, map[string]*bintree{}},
					"_typography.scss": &bintree{SrcScssElements_typographyScss, map[string]*bintree{}},
				}},
				"main.scss": &bintree{SrcScssMainScss, map[string]*bintree{}},
				"partials": &bintree{nil, map[string]*bintree{
					"_base.scss": &bintree{SrcScssPartials_baseScss, map[string]*bintree{}},
					"_collections.scss": &bintree{SrcScssPartials_collectionsScss, map[string]*bintree{}},
					"_colour-palette.scss": &bintree{SrcScssPartials_colourPaletteScss, map[string]*bintree{}},
					"_elements.scss": &bintree{SrcScssPartials_elementsScss, map[string]*bintree{}},
					"_fonts.scss": &bintree{SrcScssPartials_fontsScss, map[string]*bintree{}},
					"_jqui.scss": &bintree{SrcScssPartials_jquiScss, map[string]*bintree{}},
					"_publish.scss": &bintree{SrcScssPartials_publishScss, map[string]*bintree{}},
					"_reset.scss": &bintree{SrcScssPartials_resetScss, map[string]*bintree{}},
					"_shame.scss": &bintree{SrcScssPartials_shameScss, map[string]*bintree{}},
					"_utilities.scss": &bintree{SrcScssPartials_utilitiesScss, map[string]*bintree{}},
					"_workspace.scss": &bintree{SrcScssPartials_workspaceScss, map[string]*bintree{}},
				}},
				"utilities": &bintree{nil, map[string]*bintree{
					"_display.scss": &bintree{SrcScssUtilities_displayScss, map[string]*bintree{}},
					"_grid.scss": &bintree{SrcScssUtilities_gridScss, map[string]*bintree{}},
					"_margin.scss": &bintree{SrcScssUtilities_marginScss, map[string]*bintree{}},
					"_mixins.scss": &bintree{SrcScssUtilities_mixinsScss, map[string]*bintree{}},
					"_padding.scss": &bintree{SrcScssUtilities_paddingScss, map[string]*bintree{}},
					"_panels.scss": &bintree{SrcScssUtilities_panelsScss, map[string]*bintree{}},
					"_utilities.scss": &bintree{SrcScssUtilities_utilitiesScss, map[string]*bintree{}},
				}},
			}},
			"service-worker.js": &bintree{SrcServiceWorkerJs, map[string]*bintree{}},
			"spec": &bintree{nil, map[string]*bintree{
				"classes": &bintree{nil, map[string]*bintree{
					"FlorenceSpec.js": &bintree{SrcSpecClassesFlorencespecJs, map[string]*bintree{}},
					"PathUtilsSpec.js": &bintree{SrcSpecClassesPathutilsspecJs, map[string]*bintree{}},
					"StringUtilsSpec.js": &bintree{SrcSpecClassesStringutilsspecJs, map[string]*bintree{}},
				}},
				"support": &bintree{nil, map[string]*bintree{
					"jasmine.json": &bintree{SrcSpecSupportJasmineJson, map[string]*bintree{}},
				}},
			}},
			"templates": &bintree{nil, map[string]*bintree{
				"blockModal.handlebars": &bintree{SrcTemplatesBlockmodalHandlebars, map[string]*bintree{}},
				"blockNewsModal.handlebars": &bintree{SrcTemplatesBlocknewsmodalHandlebars, map[string]*bintree{}},
				"browseNode.handlebars": &bintree{SrcTemplatesBrowsenodeHandlebars, map[string]*bintree{}},
				"browseNodeDataVis.handlebars": &bintree{SrcTemplatesBrowsenodedatavisHandlebars, map[string]*bintree{}},
				"changePassword.handlebars": &bintree{SrcTemplatesChangepasswordHandlebars, map[string]*bintree{}},
				"chartBuilder.handlebars": &bintree{SrcTemplatesChartbuilderHandlebars, map[string]*bintree{}},
				"chartEditBarChartExtras.handlebars": &bintree{SrcTemplatesCharteditbarchartextrasHandlebars, map[string]*bintree{}},
				"chartEditBarlineExtras.handlebars": &bintree{SrcTemplatesCharteditbarlineextrasHandlebars, map[string]*bintree{}},
				"chartEditDualAxisExtras.handlebars": &bintree{SrcTemplatesCharteditdualaxisextrasHandlebars, map[string]*bintree{}},
				"chartEditLineChartExtras.handlebars": &bintree{SrcTemplatesCharteditlinechartextrasHandlebars, map[string]*bintree{}},
				"childDeletes.handlebars": &bintree{SrcTemplatesChilddeletesHandlebars, map[string]*bintree{}},
				"collectionDetails.handlebars": &bintree{SrcTemplatesCollectiondetailsHandlebars, map[string]*bintree{}},
				"collectionEdit.handlebars": &bintree{SrcTemplatesCollectioneditHandlebars, map[string]*bintree{}},
				"collectionList.handlebars": &bintree{SrcTemplatesCollectionlistHandlebars, map[string]*bintree{}},
				"editNav.handlebars": &bintree{SrcTemplatesEditnavHandlebars, map[string]*bintree{}},
				"editNavChild.handlebars": &bintree{SrcTemplatesEditnavchildHandlebars, map[string]*bintree{}},
				"editorAlert.handlebars": &bintree{SrcTemplatesEditoralertHandlebars, map[string]*bintree{}},
				"editorCompendiumDatasetFiles.handlebars": &bintree{SrcTemplatesEditorcompendiumdatasetfilesHandlebars, map[string]*bintree{}},
				"editorContent.handlebars": &bintree{SrcTemplatesEditorcontentHandlebars, map[string]*bintree{}},
				"editorContentNoTitle.handlebars": &bintree{SrcTemplatesEditorcontentnotitleHandlebars, map[string]*bintree{}},
				"editorContentOne.handlebars": &bintree{SrcTemplatesEditorcontentoneHandlebars, map[string]*bintree{}},
				"editorCorrection.handlebars": &bintree{SrcTemplatesEditorcorrectionHandlebars, map[string]*bintree{}},
				"editorDate.handlebars": &bintree{SrcTemplatesEditordateHandlebars, map[string]*bintree{}},
				"editorDocWithFiles.handlebars": &bintree{SrcTemplatesEditordocwithfilesHandlebars, map[string]*bintree{}},
				"editorDownloads.handlebars": &bintree{SrcTemplatesEditordownloadsHandlebars, map[string]*bintree{}},
				"editorDownloadsWithSummary.handlebars": &bintree{SrcTemplatesEditordownloadswithsummaryHandlebars, map[string]*bintree{}},
				"editorLinks.handlebars": &bintree{SrcTemplatesEditorlinksHandlebars, map[string]*bintree{}},
				"editorRelated.handlebars": &bintree{SrcTemplatesEditorrelatedHandlebars, map[string]*bintree{}},
				"editorServiceMessage.handlebars": &bintree{SrcTemplatesEditorservicemessageHandlebars, map[string]*bintree{}},
				"editorT1Blocks.handlebars": &bintree{SrcTemplatesEditort1blocksHandlebars, map[string]*bintree{}},
				"editorTopics.handlebars": &bintree{SrcTemplatesEditortopicsHandlebars, map[string]*bintree{}},
				"embedIframe.handlebars": &bintree{SrcTemplatesEmbediframeHandlebars, map[string]*bintree{}},
				"equationBuilder.handlebars": &bintree{SrcTemplatesEquationbuilderHandlebars, map[string]*bintree{}},
				"florence.handlebars": &bintree{SrcTemplatesFlorenceHandlebars, map[string]*bintree{}},
				"iframeNav.handlebars": &bintree{SrcTemplatesIframenavHandlebars, map[string]*bintree{}},
				"imageBuilder.handlebars": &bintree{SrcTemplatesImagebuilderHandlebars, map[string]*bintree{}},
				"linkExternalModal.handlebars": &bintree{SrcTemplatesLinkexternalmodalHandlebars, map[string]*bintree{}},
				"linkModal.handlebars": &bintree{SrcTemplatesLinkmodalHandlebars, map[string]*bintree{}},
				"loadingAnimation.handlebars": &bintree{SrcTemplatesLoadinganimationHandlebars, map[string]*bintree{}},
				"login.handlebars": &bintree{SrcTemplatesLoginHandlebars, map[string]*bintree{}},
				"mainNav.handlebars": &bintree{SrcTemplatesMainnavHandlebars, map[string]*bintree{}},
				"markdownEditor.handlebars": &bintree{SrcTemplatesMarkdowneditorHandlebars, map[string]*bintree{}},
				"markdownEditorNoTitle.handlebars": &bintree{SrcTemplatesMarkdowneditornotitleHandlebars, map[string]*bintree{}},
				"publishDetails.handlebars": &bintree{SrcTemplatesPublishdetailsHandlebars, map[string]*bintree{}},
				"publishList.handlebars": &bintree{SrcTemplatesPublishlistHandlebars, map[string]*bintree{}},
				"relatedModal.handlebars": &bintree{SrcTemplatesRelatedmodalHandlebars, map[string]*bintree{}},
				"releaseSelector.handlebars": &bintree{SrcTemplatesReleaseselectorHandlebars, map[string]*bintree{}},
				"reportList.handlebars": &bintree{SrcTemplatesReportlistHandlebars, map[string]*bintree{}},
				"reportPublishedDetails.handlebars": &bintree{SrcTemplatesReportpublisheddetailsHandlebars, map[string]*bintree{}},
				"reportUnpublishedDetails.handlebars": &bintree{SrcTemplatesReportunpublisheddetailsHandlebars, map[string]*bintree{}},
				"selectorHour.handlebars": &bintree{SrcTemplatesSelectorhourHandlebars, map[string]*bintree{}},
				"selectorMinute.handlebars": &bintree{SrcTemplatesSelectorminuteHandlebars, map[string]*bintree{}},
				"tableBuilder.handlebars": &bintree{SrcTemplatesTablebuilderHandlebars, map[string]*bintree{}},
				"teamDetails.handlebars": &bintree{SrcTemplatesTeamdetailsHandlebars, map[string]*bintree{}},
				"teamEdit.handlebars": &bintree{SrcTemplatesTeameditHandlebars, map[string]*bintree{}},
				"teamList.handlebars": &bintree{SrcTemplatesTeamlistHandlebars, map[string]*bintree{}},
				"tickAnimation.handlebars": &bintree{SrcTemplatesTickanimationHandlebars, map[string]*bintree{}},
				"uploadFileForm.handlebars": &bintree{SrcTemplatesUploadfileformHandlebars, map[string]*bintree{}},
				"userDetails.handlebars": &bintree{SrcTemplatesUserdetailsHandlebars, map[string]*bintree{}},
				"userList.handlebars": &bintree{SrcTemplatesUserlistHandlebars, map[string]*bintree{}},
				"workBrowse.handlebars": &bintree{SrcTemplatesWorkbrowseHandlebars, map[string]*bintree{}},
				"workCreate.handlebars": &bintree{SrcTemplatesWorkcreateHandlebars, map[string]*bintree{}},
				"workEditCharts.handlebars": &bintree{SrcTemplatesWorkeditchartsHandlebars, map[string]*bintree{}},
				"workEditEquations.handlebars": &bintree{SrcTemplatesWorkeditequationsHandlebars, map[string]*bintree{}},
				"workEditImages.handlebars": &bintree{SrcTemplatesWorkeditimagesHandlebars, map[string]*bintree{}},
				"workEditT1.handlebars": &bintree{SrcTemplatesWorkeditt1Handlebars, map[string]*bintree{}},
				"workEditT16.handlebars": &bintree{SrcTemplatesWorkeditt16Handlebars, map[string]*bintree{}},
				"workEditT1Census.handlebars": &bintree{SrcTemplatesWorkeditt1censusHandlebars, map[string]*bintree{}},
				"workEditT1Sections.handlebars": &bintree{SrcTemplatesWorkeditt1sectionsHandlebars, map[string]*bintree{}},
				"workEditT2.handlebars": &bintree{SrcTemplatesWorkeditt2Handlebars, map[string]*bintree{}},
				"workEditT3.handlebars": &bintree{SrcTemplatesWorkeditt3Handlebars, map[string]*bintree{}},
				"workEditT4Article.handlebars": &bintree{SrcTemplatesWorkeditt4articleHandlebars, map[string]*bintree{}},
				"workEditT4ArticleDownload.handlebars": &bintree{SrcTemplatesWorkeditt4articledownloadHandlebars, map[string]*bintree{}},
				"workEditT4Bulletin.handlebars": &bintree{SrcTemplatesWorkeditt4bulletinHandlebars, map[string]*bintree{}},
				"workEditT4Compendium.handlebars": &bintree{SrcTemplatesWorkeditt4compendiumHandlebars, map[string]*bintree{}},
				"workEditT4Methodology.handlebars": &bintree{SrcTemplatesWorkeditt4methodologyHandlebars, map[string]*bintree{}},
				"workEditT5.handlebars": &bintree{SrcTemplatesWorkeditt5Handlebars, map[string]*bintree{}},
				"workEditT6.handlebars": &bintree{SrcTemplatesWorkeditt6Handlebars, map[string]*bintree{}},
				"workEditT6Chapter.handlebars": &bintree{SrcTemplatesWorkeditt6chapterHandlebars, map[string]*bintree{}},
				"workEditT6Dataset.handlebars": &bintree{SrcTemplatesWorkeditt6datasetHandlebars, map[string]*bintree{}},
				"workEditT7.handlebars": &bintree{SrcTemplatesWorkeditt7Handlebars, map[string]*bintree{}},
				"workEditT7Landing.handlebars": &bintree{SrcTemplatesWorkeditt7landingHandlebars, map[string]*bintree{}},
				"workEditT7StaticArticle.handlebars": &bintree{SrcTemplatesWorkeditt7staticarticleHandlebars, map[string]*bintree{}},
				"workEditT8.handlebars": &bintree{SrcTemplatesWorkeditt8Handlebars, map[string]*bintree{}},
				"workEditT8Compendium.handlebars": &bintree{SrcTemplatesWorkeditt8compendiumHandlebars, map[string]*bintree{}},
				"workEditT8CorrectionList.handlebars": &bintree{SrcTemplatesWorkeditt8correctionlistHandlebars, map[string]*bintree{}},
				"workEditT8LandingDatasetList.handlebars": &bintree{SrcTemplatesWorkeditt8landingdatasetlistHandlebars, map[string]*bintree{}},
				"workEditT8LandingPage.handlebars": &bintree{SrcTemplatesWorkeditt8landingpageHandlebars, map[string]*bintree{}},
				"workEditT8VersionList.handlebars": &bintree{SrcTemplatesWorkeditt8versionlistHandlebars, map[string]*bintree{}},
				"workEditTables.handlebars": &bintree{SrcTemplatesWorkedittablesHandlebars, map[string]*bintree{}},
				"workEditVisualisation.handlebars": &bintree{SrcTemplatesWorkeditvisualisationHandlebars, map[string]*bintree{}},
				"workImport.handlebars": &bintree{SrcTemplatesWorkimportHandlebars, map[string]*bintree{}},
				"workSpace.handlebars": &bintree{SrcTemplatesWorkspaceHandlebars, map[string]*bintree{}},
			}},
			"webpack.config-test.js": &bintree{SrcWebpackConfigTestJs, map[string]*bintree{}},
			"webpack.config.js": &bintree{SrcWebpackConfigJs, map[string]*bintree{}},
			"webpack.html": &bintree{SrcWebpackHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

